!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.NavMesh=n():t.NavMesh=n()}("undefined"!=typeof self?self:this,function(){return function(t){var n={};function i(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,i),o.l=!0,o.exports}return i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)i.d(e,o,function(n){return t[n]}.bind(null,o));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i(i.s=1)}([function(t,n,i){var e,o,s;!function(n){"object"==typeof t.exports?t.exports=n():(o=[],void 0===(s="function"==typeof(e=n)?e.apply(void 0,o):e)||(t.exports=s))}(function(){function t(t){for(var n=t,i=[];n.parent;)i.unshift(n),n=n.parent;return i}var n={search:function(i,e,s,r){i.cleanDirty();var h=(r=r||{}).heuristic||n.heuristics.manhattan,c=r.closest||!1,u=new o(function(t){return t.f}),a=e;for(e.h=h(e,s),i.markDirty(e),u.push(e);u.size()>0;){var l=u.pop();if(l===s)return t(l);l.closed=!0;for(var p=i.neighbors(l),f=0,d=p.length;f<d;++f){var g=p[f];if(!g.closed&&!g.isWall()){var y=l.g+g.getCost(l),x=g.visited;(!x||y<g.g)&&(g.visited=!0,g.parent=l,g.h=g.h||h(g,s),g.g=y,g.f=g.g+g.h,i.markDirty(g),c&&(g.h<a.h||g.h===a.h&&g.g<a.g)&&(a=g),x?u.rescoreElement(g):u.push(g))}}}return c?t(a):[]},heuristics:{manhattan:function(t,n){return Math.abs(n.x-t.x)+Math.abs(n.y-t.y)},diagonal:function(t,n){var i=Math.sqrt(2),e=Math.abs(n.x-t.x),o=Math.abs(n.y-t.y);return 1*(e+o)+(i-2)*Math.min(e,o)}},cleanNode:function(t){t.f=0,t.g=0,t.h=0,t.visited=!1,t.closed=!1,t.parent=null}};function i(t,n){n=n||{},this.nodes=[],this.diagonal=!!n.diagonal,this.grid=[];for(var i=0;i<t.length;i++){this.grid[i]=[];for(var o=0,s=t[i];o<s.length;o++){var r=new e(i,o,s[o]);this.grid[i][o]=r,this.nodes.push(r)}}this.init()}function e(t,n,i){this.x=t,this.y=n,this.weight=i}function o(t){this.content=[],this.scoreFunction=t}return i.prototype.init=function(){this.dirtyNodes=[];for(var t=0;t<this.nodes.length;t++)n.cleanNode(this.nodes[t])},i.prototype.cleanDirty=function(){for(var t=0;t<this.dirtyNodes.length;t++)n.cleanNode(this.dirtyNodes[t]);this.dirtyNodes=[]},i.prototype.markDirty=function(t){this.dirtyNodes.push(t)},i.prototype.neighbors=function(t){var n=[],i=t.x,e=t.y,o=this.grid;return o[i-1]&&o[i-1][e]&&n.push(o[i-1][e]),o[i+1]&&o[i+1][e]&&n.push(o[i+1][e]),o[i]&&o[i][e-1]&&n.push(o[i][e-1]),o[i]&&o[i][e+1]&&n.push(o[i][e+1]),this.diagonal&&(o[i-1]&&o[i-1][e-1]&&n.push(o[i-1][e-1]),o[i+1]&&o[i+1][e-1]&&n.push(o[i+1][e-1]),o[i-1]&&o[i-1][e+1]&&n.push(o[i-1][e+1]),o[i+1]&&o[i+1][e+1]&&n.push(o[i+1][e+1])),n},i.prototype.toString=function(){for(var t=[],n=this.grid,i=0;i<n.length;i++){for(var e=[],o=n[i],s=0;s<o.length;s++)e.push(o[s].weight);t.push(e.join(" "))}return t.join("\n")},e.prototype.toString=function(){return"["+this.x+" "+this.y+"]"},e.prototype.getCost=function(t){return t&&t.x!=this.x&&t.y!=this.y?1.41421*this.weight:this.weight},e.prototype.isWall=function(){return 0===this.weight},o.prototype={push:function(t){this.content.push(t),this.sinkDown(this.content.length-1)},pop:function(){var t=this.content[0],n=this.content.pop();return this.content.length>0&&(this.content[0]=n,this.bubbleUp(0)),t},remove:function(t){var n=this.content.indexOf(t),i=this.content.pop();n!==this.content.length-1&&(this.content[n]=i,this.scoreFunction(i)<this.scoreFunction(t)?this.sinkDown(n):this.bubbleUp(n))},size:function(){return this.content.length},rescoreElement:function(t){this.sinkDown(this.content.indexOf(t))},sinkDown:function(t){for(var n=this.content[t];t>0;){var i=(t+1>>1)-1,e=this.content[i];if(!(this.scoreFunction(n)<this.scoreFunction(e)))break;this.content[i]=n,this.content[t]=e,t=i}},bubbleUp:function(t){for(var n=this.content.length,i=this.content[t],e=this.scoreFunction(i);;){var o,s=t+1<<1,r=s-1,h=null;if(r<n){var c=this.content[r];(o=this.scoreFunction(c))<e&&(h=r)}if(s<n){var u=this.content[s];this.scoreFunction(u)<(null===h?e:o)&&(h=s)}if(null===h)break;this.content[t]=this.content[h],this.content[h]=i,t=h}}},{astar:n,Graph:i}})},function(t,n,i){"use strict";i.r(n);var e=i(0),o=i.n(e);class s{constructor(t,n){this.x=t||0,this.y=n||0}equals(t){return this.x===t.x&&this.y===t.y}angle(t){return Math.atan2(t.y-this.y,t.x-this.x)}distance(t){const n=t.x-this.x,i=t.y-this.y;return Math.sqrt(n*n+i*i)}add(t){this.x+=t.x,this.y+=t.y}subtract(t){this.x-=t.x,this.y-=t.y}clone(){return new s(this.x,this.y)}}class r{constructor(t,n){this.id=t,this.polygon=n,this.edges=n.edges,this.neighbors=[],this.portals=[],this.centroid=this.calculateCentroid(),this.boundingRadius=this.calculateRadius(),this.weight=1}getPoints(){return this.polygon.points}contains(t){return this.polygon.contains(t.x,t.y)||this.isPointOnEdge(t)}calculateCentroid(){const t=new s(0,0),n=this.polygon.points.length;return this.polygon.points.forEach(n=>t.add(n)),t.x/=n,t.y/=n,t}calculateRadius(){let t=0;for(const n of this.polygon.points){const i=this.centroid.distance(n);i>t&&(t=i)}return t}isPointOnEdge({x:t,y:n}){for(const i of this.edges)if(i.pointOnSegment(t,n))return!0;return!1}destroy(){this.neighbors=[],this.portals=[]}toString(){return`NavPoly(id: ${this.id} at: ${this.centroid})`}isWall(){return 0===this.weight}centroidDistance(t){return this.centroid.distance(t.centroid)}getCost(t){return this.centroidDistance(t)}}class h{constructor(t){this.nodes=t,this.init()}neighbors(t){return t.neighbors}navHeuristic(t,n){return t.centroidDistance(n)}destroy(){this.cleanDirty(),this.nodes=[]}}h.prototype.init=o.a.Graph.prototype.init,h.prototype.cleanDirty=o.a.Graph.prototype.cleanDirty,h.prototype.markDirty=o.a.Graph.prototype.markDirty;var c=h;function u(t,n,i){const e=n.x-t.x,o=n.y-t.y;return(i.x-t.x)*o-e*(i.y-t.y)}function a(t,n,i=1e-4){return Math.abs(t-n)<=i}function l(t,n){let i=t-n;const e=i+Math.PI,o=2*Math.PI;return i=e-Math.floor(e/o)*o,i-=Math.PI}function p(t,n,i=1e-4){const e=u(t.start,t.end,n.start),o=u(t.start,t.end,n.end);return!(!a(e,0,i)||!a(o,0,i))}var f=class{constructor(){this.portals=[]}push(t,n=null){null===n&&(n=t),this.portals.push({left:t,right:n})}stringPull(){var t,n,i,e=this.portals,o=[],s=0,r=0,h=0;t=e[0].left,n=e[0].left,i=e[0].right,o.push(t);for(var c=1;c<e.length;c++){var a=e[c].left,l=e[c].right;if(u(t,i,l)<=0){if(!(t.equals(i)||u(t,n,l)>0)){o.push(n),n=t=n,i=t,r=s=r,h=s,c=s;continue}i=l,h=c}if(u(t,n,a)>=0){if(!(t.equals(n)||u(t,i,a)<0)){o.push(i),n=t=i,i=t,r=s=h,h=s,c=s;continue}n=a,r=c}}return 0!==o.length&&o[o.length-1].equals(e[e.length-1].left)||o.push(e[e.length-1].left),this.path=o,o}};class d{constructor(t,n,i,e){this.start=new s(t,n),this.end=new s(i,e),this.left=Math.min(t,i),this.right=Math.max(t,i),this.top=Math.min(n,e),this.bottom=Math.max(n,e)}pointOnSegment(t,n){return t>=this.left&&t<=this.right&&n>=this.top&&n<=this.bottom&&this.pointOnLine(t,n)}pointOnLine(t,n){return(t-this.left)*(this.bottom-this.top)==(this.right-this.left)*(n-this.top)}}class g{constructor(t,n=!0){this.points=t,this.edges=[];for(let n=1;n<t.length;n++){const i=t[n-1],e=t[n];this.edges.push(new d(i.x,i.y,e.x,e.y))}if(n){const n=t[0],i=t[t.length-1];this.edges.push(new d(n.x,n.y,i.x,i.y))}}contains(t,n){let i=!1;for(let e=-1,o=this.points.length-1;++e<this.points.length;o=e){const s=this.points[e].x,r=this.points[e].y,h=this.points[o].x,c=this.points[o].y;(r<=n&&n<c||c<=n&&n<r)&&t<(h-s)*(n-r)/(c-r)+s&&(i=!i)}return i}}n.default=class{constructor(t,n=0){this._meshShrinkAmount=n;const i=t.map(t=>{const n=t.map(t=>new s(t.x,t.y));return new g(n)});this._navPolygons=i.map((t,n)=>new r(n,t)),this._calculateNeighbors(),this._graph=new c(this._navPolygons)}getPolygons(){return this._navPolygons}destroy(){this._graph.destroy();for(const t of this._navPolygons)t.destroy();this._navPolygons=[]}findPath(t,n){let i,e,r=null,h=null,c=Number.MAX_VALUE,u=Number.MAX_VALUE;const a=new s(t.x,t.y),l=new s(n.x,n.y);for(const t of this._navPolygons)e=t.boundingRadius,(i=t.centroid.distance(a))<=c&&i<=e&&t.contains(a)&&(r=t,c=i),(i=t.centroid.distance(l))<=u&&i<=e&&t.contains(l)&&(h=t,u=i);if(!r&&this._meshShrinkAmount>0)for(const t of this._navPolygons)if(e=t.boundingRadius+this._meshShrinkAmount,(i=t.centroid.distance(a))<=e){const{distance:n}=this._projectPointToPolygon(a,t);n<=this._meshShrinkAmount&&n<c&&(r=t,c=n)}if(!h&&this._meshShrinkAmount>0)for(const t of this._navPolygons)if(e=t.boundingRadius+this._meshShrinkAmount,(i=t.centroid.distance(l))<=e){const{distance:n}=this._projectPointToPolygon(l,t);n<=this._meshShrinkAmount&&n<u&&(h=t,u=n)}if(!r||!h)return null;if(r===h)return[a,l];const p=o.a.astar.search(this._graph,r,h,{heuristic:this._graph.navHeuristic});if(0===p.length)return null;p.unshift(r);const d=new f;d.push(a);for(let t=0;t<p.length-1;t++){const n=p[t],i=p[t+1];let e=null;for(let t=0;t<n.neighbors.length;t++)n.neighbors[t].id===i.id&&(e=n.portals[t]);d.push(e.start,e.end)}d.push(l),d.stringPull();let g=null;const y=[];for(const t of d.path){const n=t.clone();g&&n.equals(g)||y.push(n),g=n}return y}_calculateNeighbors(){for(let t=0;t<this._navPolygons.length;t++){const n=this._navPolygons[t];for(let i=t+1;i<this._navPolygons.length;i++){const t=this._navPolygons[i];if(!(n.centroid.distance(t.centroid)>n.boundingRadius+t.boundingRadius))for(const i of n.edges)for(const e of t.edges){if(!p(i,e))continue;const o=this._getSegmentOverlap(i,e);if(!o)continue;n.neighbors.push(t),t.neighbors.push(n);const[s,r]=o;let h=n.centroid.angle(i.start),c=n.centroid.angle(o[0]),u=n.centroid.angle(o[1]),a=l(h,c),f=l(h,u);a<f?n.portals.push(new d(s.x,s.y,r.x,r.y)):n.portals.push(new d(r.x,r.y,s.x,s.y)),h=t.centroid.angle(e.start),c=t.centroid.angle(o[0]),u=t.centroid.angle(o[1]),(a=l(h,c))<(f=l(h,u))?t.portals.push(new d(s.x,s.y,r.x,r.y)):t.portals.push(new d(r.x,r.y,s.x,s.y))}}}}_getSegmentOverlap(t,n){const i=[{line:t,point:t.start},{line:t,point:t.end},{line:n,point:n.start},{line:n,point:n.end}];i.sort(function(t,n){return t.point.x<n.point.x?-1:t.point.x>n.point.x?1:t.point.y<n.point.y?-1:t.point.y>n.point.y?1:0});const e=i[0].line===i[1].line,o=i[1].point.equals(i[2].point);return e||o?null:[i[1].point,i[2].point]}_projectPointToPolygon(t,n){let i=null,e=Number.MAX_VALUE;for(const o of n.edges){const n=this._projectPointToEdge(t,o),s=t.distance(n);(null===i||s<e)&&(e=s,i=n)}return{point:i,distance:e}}_distanceSquared(t,n){const i=n.x-t.x,e=n.y-t.y;return i*i+e*e}_projectPointToEdge(t,n){const i=n.start,e=n.end,o=this._distanceSquared(i,e);let r=((t.x-i.x)*(e.x-i.x)+(t.y-i.y)*(e.y-i.y))/o;return r=function(t,n,i){return t<n&&(t=n),t>i&&(t=i),t}(r,0,1),new s(i.x+r*(e.x-i.x),i.y+r*(e.y-i.y))}}}]).default});
//# sourceMappingURL=navmesh.min.js.map