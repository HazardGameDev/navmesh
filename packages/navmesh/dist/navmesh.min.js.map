{"version":3,"sources":["webpack://NavMesh/webpack/universalModuleDefinition","webpack://NavMesh/webpack/bootstrap","webpack://NavMesh/D:/GitHub/navmesh/node_modules/javascript-astar/astar.js","webpack://NavMesh/./math/vector-2.js","webpack://NavMesh/./navpoly.js","webpack://NavMesh/./navgraph.js","webpack://NavMesh/./utils.js","webpack://NavMesh/./channel.js","webpack://NavMesh/./math/line.js","webpack://NavMesh/./math/polygon.js","webpack://NavMesh/./index.js","webpack://NavMesh/./navmesh.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","undefined","apply","pathTo","node","curr","path","parent","unshift","astar","search","graph","start","end","options","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","f","closestNode","h","markDirty","push","size","currentNode","pop","closed","neighbors","il","length","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","Math","abs","x","y","diagonal","D2","sqrt","d1","d2","min","cleanNode","Graph","gridIn","nodes","grid","row","GridNode","init","weight","scoreFunction","content","dirtyNodes","ret","toString","graphString","rowDebug","join","fromNeighbor","element","sinkDown","result","bubbleUp","remove","indexOf","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2","Vector2","constructor","equals","v","angle","atan2","distance","dx","dy","add","subtract","clone","NavPoly","id","polygon","edges","portals","centroid","calculateCentroid","boundingRadius","calculateRadius","getPoints","points","contains","point","isPointOnEdge","forEach","edge","pointOnSegment","destroy","centroidDistance","navPolygon","NavGraph","navPolygons","navHeuristic","navPolygon1","navPolygon2","jsastar","triarea2","a","b","ax","ay","almostEqual","value1","value2","errorMargin","angleDifference","PI","j","floor","areCollinear","line1","line2","area1","area2","Channel","p1","p2","left","right","stringPull","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","Line","x1","y1","x2","y2","max","top","bottom","pointOnLine","Polygon","first","last","inside","ix","iy","jx","jy","NavMesh","meshPolygonPoints","meshShrinkAmount","_meshShrinkAmount","newPolys","map","polyPoints","vectors","_navPolygons","_calculateNeighbors","_graph","getPolygons","poly","findPath","startPoint","endPoint","startPoly","endPoly","startDistance","Number","MAX_VALUE","endDistance","startVector","endVector","navPoly","_projectPointToPolygon","astarPath","channel","nextNavPolygon","portal","lastPoint","phaserPath","newPoint","otherNavPoly","otherEdge","overlap","_getSegmentOverlap","edgeStartAngle","a1","a2","line","sort","noOverlap","singlePointOverlap","closestProjection","closestDistance","projectedPoint","_projectPointToEdge","_distanceSquared","l2","clamp"],"mappings":"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","file":"navmesh.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"NavMesh\"] = factory();\n\telse\n\t\troot[\"NavMesh\"] = factory();\n})((typeof self !== \"undefined\" ? self : this), function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// javascript-astar 0.4.2\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n(function(definition) {\n  /* global module, define */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], definition);\n  } else {\n    var exports = definition();\n    window.astar = exports.astar;\n    window.Graph = exports.Graph;\n  }\n})(function() {\n\nfunction pathTo(node) {\n  var curr = node;\n  var path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function(node) {\n    return node.f;\n  });\n}\n\nvar astar = {\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\n    var closest = options.closest || false;\n\n    var openHeap = getHeap();\n    var closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n};\n\n/**\n * A graph memory structure\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options]\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n */\nfunction Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function() {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function() {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function(node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function(node) {\n  var ret = [];\n  var x = node.x;\n  var y = node.y;\n  var grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function() {\n  var graphString = [];\n  var nodes = this.grid;\n  for (var x = 0; x < nodes.length; x++) {\n    var rowDebug = [];\n    var row = nodes[x];\n    for (var y = 0; y < row.length; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function() {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function(fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function() {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function() {\n    return this.content.length;\n  },\n  rescoreElement: function(node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n};\n\nreturn {\n  astar: astar,\n  Graph: Graph\n};\n\n});","/**\r\n * Stripped down version of Phaser's Vector2 with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport default class Vector2 {\r\n  constructor(x, y) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n  }\r\n\r\n  equals(v) {\r\n    return this.x === v.x && this.y === v.y;\r\n  }\r\n\r\n  angle(v) {\r\n    return Math.atan2(v.y - this.y, v.x - this.x);\r\n  }\r\n\r\n  distance(v) {\r\n    const dx = v.x - this.x;\r\n    const dy = v.y - this.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  add(v) {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n  }\r\n\r\n  subtract(v) {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n  }\r\n\r\n  clone() {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n\r\n/**\r\n * A class that represents a navigable polygon with a navmesh. It is built on top of a\r\n * {@link Polygon}. It implements the properties and fields that javascript-astar needs - weight,\r\n * toString, isWall and getCost. See GPS test from astar repo for structure:\r\n * https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavPoly\r\n */\r\nexport default class NavPoly {\r\n  /**\r\n   * Creates an instance of NavPoly.\r\n   * @param {number} id\r\n   * @param {Polygon} polygon\r\n   *\r\n   * @memberof NavPoly\r\n   */\r\n  constructor(id, polygon) {\r\n    this.id = id;\r\n    this.polygon = polygon;\r\n    this.edges = polygon.edges;\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n    this.centroid = this.calculateCentroid();\r\n    this.boundingRadius = this.calculateRadius();\r\n\r\n    this.weight = 1; // jsastar property\r\n  }\r\n\r\n  /**\r\n   * Returns an array of points that form the polygon.\r\n   *\r\n   * @returns {Vector2[]}\r\n   * @memberof NavPoly\r\n   */\r\n  getPoints() {\r\n    return this.polygon.points;\r\n  }\r\n\r\n  /**\r\n   * Check if the given point-like object is within the polygon\r\n   *\r\n   * @param {object} point Object of the form {x, y}\r\n   * @returns {boolean}\r\n   * @memberof NavPoly\r\n   */\r\n  contains(point) {\r\n    // Phaser's polygon check doesn't handle when a point is on one of the edges of the line. Note:\r\n    // check numerical stability here. It would also be good to optimize this for different shapes.\r\n    return this.polygon.contains(point.x, point.y) || this.isPointOnEdge(point);\r\n  }\r\n\r\n  /**\r\n   * Only rectangles are supported, so this calculation works, but this is not actually the centroid\r\n   * calculation for a polygon. This is just the average of the vertices - proper centroid of a\r\n   * polygon factors in the area.\r\n   *\r\n   * @returns {Vector2}\r\n   * @memberof NavPoly\r\n   */\r\n  calculateCentroid() {\r\n    const centroid = new Vector2(0, 0);\r\n    const length = this.polygon.points.length;\r\n    this.polygon.points.forEach(p => centroid.add(p));\r\n    centroid.x /= length;\r\n    centroid.y /= length;\r\n    return centroid;\r\n  }\r\n\r\n  /**\r\n   * Calculate the radius of a circle that circumscribes the polygon.\r\n   *\r\n   * @returns {number}\r\n   * @memberof NavPoly\r\n   */\r\n  calculateRadius() {\r\n    let boundingRadius = 0;\r\n    for (const point of this.polygon.points) {\r\n      const d = this.centroid.distance(point);\r\n      if (d > boundingRadius) boundingRadius = d;\r\n    }\r\n    return boundingRadius;\r\n  }\r\n\r\n  /**\r\n   * Check if the given point-like object is on one of the edges of the polygon.\r\n   *\r\n   * @param {object} Point-like object in the form { x, y }\r\n   * @returns {boolean}\r\n   * @memberof NavPoly\r\n   */\r\n  isPointOnEdge({ x, y }) {\r\n    for (const edge of this.edges) {\r\n      if (edge.pointOnSegment(x, y)) return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  destroy() {\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n  }\r\n\r\n  // jsastar methods\r\n  toString() {\r\n    return `NavPoly(id: ${this.id} at: ${this.centroid})`;\r\n  }\r\n  isWall() {\r\n    return this.weight === 0;\r\n  }\r\n  centroidDistance(navPolygon) {\r\n    return this.centroid.distance(navPolygon.centroid);\r\n  }\r\n  getCost(navPolygon) {\r\n    return this.centroidDistance(navPolygon);\r\n  }\r\n}\r\n","import jsastar from \"javascript-astar\";\r\n\r\n/**\r\n * Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\r\n * repo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavGraph\r\n * @private\r\n */\r\nclass NavGraph {\r\n  constructor(navPolygons) {\r\n    this.nodes = navPolygons;\r\n    this.init();\r\n  }\r\n\r\n  neighbors(navPolygon) {\r\n    return navPolygon.neighbors;\r\n  }\r\n\r\n  navHeuristic(navPolygon1, navPolygon2) {\r\n    return navPolygon1.centroidDistance(navPolygon2);\r\n  }\r\n\r\n  destroy() {\r\n    this.cleanDirty();\r\n    this.nodes = [];\r\n  }\r\n}\r\n\r\nNavGraph.prototype.init = jsastar.Graph.prototype.init;\r\nNavGraph.prototype.cleanDirty = jsastar.Graph.prototype.cleanDirty;\r\nNavGraph.prototype.markDirty = jsastar.Graph.prototype.markDirty;\r\n\r\nexport default NavGraph;\r\n","/**\r\n * Twice the area of the triangle formed by a, b and c\r\n * @returns {number}\r\n * @private\r\n */\r\nexport function triarea2(a, b, c) {\r\n  const ax = b.x - a.x;\r\n  const ay = b.y - a.y;\r\n  const bx = c.x - a.x;\r\n  const by = c.y - a.y;\r\n  return bx * ay - ax * by;\r\n}\r\n\r\n/**\r\n * Clamp value between min and max\r\n * @returns {number}\r\n * @private\r\n */\r\nexport function clamp(value, min, max) {\r\n  if (value < min) value = min;\r\n  if (value > max) value = max;\r\n  return value;\r\n}\r\n\r\n/**\r\n * Check if two values within a small margin of one another\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function almostEqual(value1, value2, errorMargin = 0.0001) {\r\n  if (Math.abs(value1 - value2) <= errorMargin) return true;\r\n  else return false;\r\n}\r\n\r\n/**\r\n * Find the smallest angle difference between two angles\r\n * https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0\r\n * @returns {number}\r\n * @private\r\n */\r\nexport function angleDifference(x, y) {\r\n  let a = x - y;\r\n  const i = a + Math.PI;\r\n  const j = Math.PI * 2;\r\n  a = i - Math.floor(i / j) * j; // (a+180) % 360; this ensures the correct sign\r\n  a -= Math.PI;\r\n  return a;\r\n}\r\n\r\n/**\r\n * Check if two lines are collinear (within a marign)\r\n * @returns {boolean}\r\n * @private\r\n */\r\nexport function areCollinear(line1, line2, errorMargin = 0.0001) {\r\n  // Figure out if the two lines are equal by looking at the area of the triangle formed\r\n  // by their points\r\n  const area1 = triarea2(line1.start, line1.end, line2.start);\r\n  const area2 = triarea2(line1.start, line1.end, line2.end);\r\n  if (almostEqual(area1, 0, errorMargin) && almostEqual(area2, 0, errorMargin)) {\r\n    return true;\r\n  } else return false;\r\n}\r\n","// Mostly sourced from PatrolJS at the moment. TODO: come back and reimplement this as an incomplete\r\n// funnel algorithm so astar checks can be more accurate.\r\n\r\nimport { triarea2 } from \"./utils\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass Channel {\r\n  constructor() {\r\n    this.portals = [];\r\n  }\r\n\r\n  push(p1, p2 = null) {\r\n    if (p2 === null) p2 = p1;\r\n    this.portals.push({\r\n      left: p1,\r\n      right: p2\r\n    });\r\n  }\r\n\r\n  stringPull() {\r\n    var portals = this.portals;\r\n    var pts = [];\r\n    // Init scan state\r\n    var portalApex, portalLeft, portalRight;\r\n    var apexIndex = 0,\r\n      leftIndex = 0,\r\n      rightIndex = 0;\r\n\r\n    portalApex = portals[0].left;\r\n    portalLeft = portals[0].left;\r\n    portalRight = portals[0].right;\r\n\r\n    // Add start point.\r\n    pts.push(portalApex);\r\n\r\n    for (var i = 1; i < portals.length; i++) {\r\n      // Find the next portal vertices\r\n      var left = portals[i].left;\r\n      var right = portals[i].right;\r\n\r\n      // Update right vertex.\r\n      if (triarea2(portalApex, portalRight, right) <= 0.0) {\r\n        if (portalApex.equals(portalRight) || triarea2(portalApex, portalLeft, right) > 0.0) {\r\n          // Tighten the funnel.\r\n          portalRight = right;\r\n          rightIndex = i;\r\n        } else {\r\n          // Right vertex just crossed over the left vertex, so the left vertex should\r\n          // now be part of the path.\r\n          pts.push(portalLeft);\r\n\r\n          // Restart scan from portal left point.\r\n\r\n          // Make current left the new apex.\r\n          portalApex = portalLeft;\r\n          apexIndex = leftIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Update left vertex.\r\n      if (triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n        if (portalApex.equals(portalLeft) || triarea2(portalApex, portalRight, left) < 0.0) {\r\n          // Tighten the funnel.\r\n          portalLeft = left;\r\n          leftIndex = i;\r\n        } else {\r\n          // Left vertex just crossed over the right vertex, so the right vertex should\r\n          // now be part of the path\r\n          pts.push(portalRight);\r\n\r\n          // Restart scan from portal right point.\r\n\r\n          // Make current right the new apex.\r\n          portalApex = portalRight;\r\n          apexIndex = rightIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pts.length === 0 || !pts[pts.length - 1].equals(portals[portals.length - 1].left)) {\r\n      // Append last point to path.\r\n      pts.push(portals[portals.length - 1].left);\r\n    }\r\n\r\n    this.path = pts;\r\n    return pts;\r\n  }\r\n}\r\n\r\nexport default Channel;\r\n","import Vector2 from \"./vector-2\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Line with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Line\r\n */\r\nexport default class Line {\r\n  constructor(x1, y1, x2, y2) {\r\n    this.start = new Vector2(x1, y1);\r\n    this.end = new Vector2(x2, y2);\r\n\r\n    this.left = Math.min(x1, x2);\r\n    this.right = Math.max(x1, x2);\r\n    this.top = Math.min(y1, y2);\r\n    this.bottom = Math.max(y1, y2);\r\n  }\r\n\r\n  pointOnSegment(x, y) {\r\n    return (\r\n      x >= this.left &&\r\n      x <= this.right &&\r\n      y >= this.top &&\r\n      y <= this.bottom &&\r\n      this.pointOnLine(x, y)\r\n    );\r\n  }\r\n\r\n  pointOnLine(x, y) {\r\n    // Compare slope of line start -> xy to line start -> line end\r\n    return (x - this.left) * (this.bottom - this.top) === (this.right - this.left) * (y - this.top);\r\n  }\r\n}\r\n","import Line from \"./line\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Polygon with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Polygon\r\n */\r\nexport default class Polygon {\r\n  constructor(points, closed = true) {\r\n    this.points = points;\r\n    this.edges = [];\r\n\r\n    for (let i = 1; i < points.length; i++) {\r\n      const p1 = points[i - 1];\r\n      const p2 = points[i];\r\n      this.edges.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n    }\r\n    if (closed) {\r\n      const first = points[0];\r\n      const last = points[points.length - 1];\r\n      this.edges.push(new Line(first.x, first.y, last.x, last.y));\r\n    }\r\n  }\r\n\r\n  contains(x, y) {\r\n    let inside = false;\r\n\r\n    for (let i = -1, j = this.points.length - 1; ++i < this.points.length; j = i) {\r\n      const ix = this.points[i].x;\r\n      const iy = this.points[i].y;\r\n\r\n      const jx = this.points[j].x;\r\n      const jy = this.points[j].y;\r\n\r\n      if (\r\n        ((iy <= y && y < jy) || (jy <= y && y < iy)) &&\r\n        x < ((jx - ix) * (y - iy)) / (jy - iy) + ix\r\n      ) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n\r\n    return inside;\r\n  }\r\n}\r\n","import NavMesh from \"./navmesh\";\r\n\r\nexport default NavMesh;\r\n","import jsastar from \"javascript-astar\";\r\nimport NavPoly from \"./navpoly\";\r\nimport NavGraph from \"./navgraph\";\r\nimport Channel from \"./channel\";\r\nimport { angleDifference, areCollinear, clamp } from \"./utils\";\r\nimport Vector2 from \"./math/vector-2\";\r\nimport Line from \"./math/line\";\r\nimport Polygon from \"./math/polygon\";\r\n\r\n/**\r\n * The workhorse that represents a navigation mesh built from a series of polygons. Once built, the\r\n * mesh can be asked for a path from one point to another point. Some internal terminology usage:\r\n * - neighbor: a polygon that shares part of an edge with another polygon\r\n * - portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\r\n * - channel: the path of polygons from starting point to end point\r\n * - pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\r\n *   channel. Equivalent to having a string snaking through a hallway and then pulling it taut.\r\n *\r\n * @class NavMesh\r\n */\r\nexport default class NavMesh {\r\n  /**\r\n   * Creates an instance of NavMesh.\r\n   * @param {object[][]} meshPolygonPoints Array where each element is an array of point-like\r\n   * objects that defines a polygon.\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been\r\n   * shrunk around obstacles (a.k.a the amount obstacles have been expanded)\r\n   * @memberof NavMesh\r\n   */\r\n  constructor(meshPolygonPoints, meshShrinkAmount = 0) {\r\n    this._meshShrinkAmount = meshShrinkAmount;\r\n\r\n    const newPolys = meshPolygonPoints.map(polyPoints => {\r\n      const vectors = polyPoints.map(p => new Vector2(p.x, p.y));\r\n      return new Polygon(vectors);\r\n    });\r\n\r\n    this._navPolygons = newPolys.map((polygon, i) => new NavPoly(i, polygon));\r\n\r\n    this._calculateNeighbors();\r\n\r\n    // Astar graph of connections between polygons\r\n    this._graph = new NavGraph(this._navPolygons);\r\n  }\r\n\r\n  /**\r\n   * Get the NavPolys that are in this navmesh.\r\n   *\r\n   * @returns {NavPoly[]}\r\n   * @memberof NavMesh\r\n   */\r\n  getPolygons() {\r\n    return this._navPolygons;\r\n  }\r\n\r\n  /**\r\n   * Cleanup method to remove references.\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  destroy() {\r\n    this._graph.destroy();\r\n    for (const poly of this._navPolygons) poly.destroy();\r\n    this._navPolygons = [];\r\n  }\r\n\r\n  /**\r\n   * Find a path from the start point to the end point using this nav mesh.\r\n   *\r\n   * @param {object} startPoint A point-like object in the form {x, y}\r\n   * @param {object} endPoint A point-like object in the form {x, y}\r\n   * @returns {Vector2[]|null} An array of points if a path is found, or null if no path\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  findPath(startPoint, endPoint) {\r\n    let startPoly = null;\r\n    let endPoly = null;\r\n    let startDistance = Number.MAX_VALUE;\r\n    let endDistance = Number.MAX_VALUE;\r\n    let d, r;\r\n    const startVector = new Vector2(startPoint.x, startPoint.y);\r\n    const endVector = new Vector2(endPoint.x, endPoint.y);\r\n\r\n    // Find the closest poly for the starting and ending point\r\n    for (const navPoly of this._navPolygons) {\r\n      r = navPoly.boundingRadius;\r\n      // Start\r\n      d = navPoly.centroid.distance(startVector);\r\n      if (d <= startDistance && d <= r && navPoly.contains(startVector)) {\r\n        startPoly = navPoly;\r\n        startDistance = d;\r\n      }\r\n      // End\r\n      d = navPoly.centroid.distance(endVector);\r\n      if (d <= endDistance && d <= r && navPoly.contains(endVector)) {\r\n        endPoly = navPoly;\r\n        endDistance = d;\r\n      }\r\n    }\r\n\r\n    // If the start point wasn't inside a polygon, run a more liberal check that allows a point\r\n    // to be within meshShrinkAmount radius of a polygon\r\n    if (!startPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        // Check if point is within bounding circle to avoid extra projection calculations\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(startVector);\r\n        if (d <= r) {\r\n          // Check if projected point is within range of a polgyon and is closer than the\r\n          // previous point\r\n          const { distance } = this._projectPointToPolygon(startVector, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < startDistance) {\r\n            startPoly = navPoly;\r\n            startDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Same check as above, but for the end point\r\n    if (!endPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(endVector);\r\n        if (d <= r) {\r\n          const { distance } = this._projectPointToPolygon(endVector, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < endDistance) {\r\n            endPoly = navPoly;\r\n            endDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // No matching polygons locations for the start or end, so no path found\r\n    if (!startPoly || !endPoly) return null;\r\n\r\n    // If the start and end polygons are the same, return a direct path\r\n    if (startPoly === endPoly) return [startVector, endVector];\r\n\r\n    // Search!\r\n    const astarPath = jsastar.astar.search(this._graph, startPoly, endPoly, {\r\n      heuristic: this._graph.navHeuristic\r\n    });\r\n\r\n    // While the start and end polygons may be valid, no path between them\r\n    if (astarPath.length === 0) return null;\r\n\r\n    // jsastar drops the first point from the path, but the funnel algorithm needs it\r\n    astarPath.unshift(startPoly);\r\n\r\n    // We have a path, so now time for the funnel algorithm\r\n    const channel = new Channel();\r\n    channel.push(startVector);\r\n    for (let i = 0; i < astarPath.length - 1; i++) {\r\n      const navPolygon = astarPath[i];\r\n      const nextNavPolygon = astarPath[i + 1];\r\n\r\n      // Find the portal\r\n      let portal = null;\r\n      for (let i = 0; i < navPolygon.neighbors.length; i++) {\r\n        if (navPolygon.neighbors[i].id === nextNavPolygon.id) {\r\n          portal = navPolygon.portals[i];\r\n        }\r\n      }\r\n\r\n      // Push the portal vertices into the channel\r\n      channel.push(portal.start, portal.end);\r\n    }\r\n    channel.push(endVector);\r\n\r\n    // Pull a string along the channel to run the funnel\r\n    channel.stringPull();\r\n\r\n    // Clone path, excluding duplicates\r\n    let lastPoint = null;\r\n    const phaserPath = [];\r\n    for (const p of channel.path) {\r\n      const newPoint = p.clone();\r\n      if (!lastPoint || !newPoint.equals(lastPoint)) phaserPath.push(newPoint);\r\n      lastPoint = newPoint;\r\n    }\r\n\r\n    return phaserPath;\r\n  }\r\n\r\n  _calculateNeighbors() {\r\n    // Fill out the neighbor information for each navpoly\r\n    for (let i = 0; i < this._navPolygons.length; i++) {\r\n      const navPoly = this._navPolygons[i];\r\n\r\n      for (let j = i + 1; j < this._navPolygons.length; j++) {\r\n        const otherNavPoly = this._navPolygons[j];\r\n\r\n        // Check if the other navpoly is within range to touch\r\n        const d = navPoly.centroid.distance(otherNavPoly.centroid);\r\n        if (d > navPoly.boundingRadius + otherNavPoly.boundingRadius) continue;\r\n\r\n        // The are in range, so check each edge pairing\r\n        for (const edge of navPoly.edges) {\r\n          for (const otherEdge of otherNavPoly.edges) {\r\n            // If edges aren't collinear, not an option for connecting navpolys\r\n            if (!areCollinear(edge, otherEdge)) continue;\r\n\r\n            // If they are collinear, check if they overlap\r\n            const overlap = this._getSegmentOverlap(edge, otherEdge);\r\n            if (!overlap) continue;\r\n\r\n            // Connections are symmetric!\r\n            navPoly.neighbors.push(otherNavPoly);\r\n            otherNavPoly.neighbors.push(navPoly);\r\n\r\n            // Calculate the portal between the two polygons - this needs to be in\r\n            // counter-clockwise order, relative to each polygon\r\n            const [p1, p2] = overlap;\r\n            let edgeStartAngle = navPoly.centroid.angle(edge.start);\r\n            let a1 = navPoly.centroid.angle(overlap[0]);\r\n            let a2 = navPoly.centroid.angle(overlap[1]);\r\n            let d1 = angleDifference(edgeStartAngle, a1);\r\n            let d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              navPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              navPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            edgeStartAngle = otherNavPoly.centroid.angle(otherEdge.start);\r\n            a1 = otherNavPoly.centroid.angle(overlap[0]);\r\n            a2 = otherNavPoly.centroid.angle(overlap[1]);\r\n            d1 = angleDifference(edgeStartAngle, a1);\r\n            d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              otherNavPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              otherNavPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            // Two convex polygons shouldn't be connected more than once! (Unless\r\n            // there are unnecessary vertices...)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check two collinear line segments to see if they overlap by sorting the points.\r\n  // Algorithm source: http://stackoverflow.com/a/17152247\r\n  _getSegmentOverlap(line1, line2) {\r\n    const points = [\r\n      { line: line1, point: line1.start },\r\n      { line: line1, point: line1.end },\r\n      { line: line2, point: line2.start },\r\n      { line: line2, point: line2.end }\r\n    ];\r\n    points.sort(function(a, b) {\r\n      if (a.point.x < b.point.x) return -1;\r\n      else if (a.point.x > b.point.x) return 1;\r\n      else {\r\n        if (a.point.y < b.point.y) return -1;\r\n        else if (a.point.y > b.point.y) return 1;\r\n        else return 0;\r\n      }\r\n    });\r\n    // If the first two points in the array come from the same line, no overlap\r\n    const noOverlap = points[0].line === points[1].line;\r\n    // If the two middle points in the array are the same coordinates, then there is a\r\n    // single point of overlap.\r\n    const singlePointOverlap = points[1].point.equals(points[2].point);\r\n    if (noOverlap || singlePointOverlap) return null;\r\n    else return [points[1].point, points[2].point];\r\n  }\r\n\r\n  /**\r\n   * Project a point onto a polygon in the shortest distance possible.\r\n   *\r\n   * @param {Phaser.Point} point The point to project\r\n   * @param {NavPoly} navPoly The navigation polygon to test against\r\n   * @returns {{point: Phaser.Point, distance: number}}\r\n   *\r\n   * @private\r\n   * @memberof NavMesh\r\n   */\r\n  _projectPointToPolygon(point, navPoly) {\r\n    let closestProjection = null;\r\n    let closestDistance = Number.MAX_VALUE;\r\n    for (const edge of navPoly.edges) {\r\n      const projectedPoint = this._projectPointToEdge(point, edge);\r\n      const d = point.distance(projectedPoint);\r\n      if (closestProjection === null || d < closestDistance) {\r\n        closestDistance = d;\r\n        closestProjection = projectedPoint;\r\n      }\r\n    }\r\n    return { point: closestProjection, distance: closestDistance };\r\n  }\r\n\r\n  _distanceSquared(a, b) {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n\r\n  // Project a point onto a line segment\r\n  // JS Source: http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\n  _projectPointToEdge(point, line) {\r\n    const a = line.start;\r\n    const b = line.end;\r\n    // Consider the parametric equation for the edge's line, p = a + t (b - a). We want to find\r\n    // where our point lies on the line by solving for t:\r\n    //  t = [(p-a) . (b-a)] / |b-a|^2\r\n    const l2 = this._distanceSquared(a, b);\r\n    let t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / l2;\r\n    // We clamp t from [0,1] to handle points outside the segment vw.\r\n    t = clamp(t, 0, 1);\r\n    // Project onto the segment\r\n    const p = new Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y));\r\n    return p;\r\n  }\r\n}\r\n"],"sourceRoot":""}