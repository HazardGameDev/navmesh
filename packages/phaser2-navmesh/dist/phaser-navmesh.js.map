{"version":3,"sources":["webpack://PhaserNavmesh/webpack/universalModuleDefinition","webpack://PhaserNavmesh/webpack/bootstrap","webpack://PhaserNavmesh/C:/Users/mikewesthad/Documents/GitHub/phaser-navmesh/node_modules/javascript-astar/astar.js","webpack://PhaserNavmesh/../../navmesh/src/utils.js","webpack://PhaserNavmesh/../../navmesh/src/math/vector-2.js","webpack://PhaserNavmesh/../../navmesh/src/navpoly.js","webpack://PhaserNavmesh/../../navmesh/src/navgraph.js","webpack://PhaserNavmesh/../../navmesh/src/channel.js","webpack://PhaserNavmesh/../../navmesh/src/math/line.js","webpack://PhaserNavmesh/../../navmesh/src/math/polygon.js","webpack://PhaserNavmesh/../../navmesh/src/index.js","webpack://PhaserNavmesh/../../navmesh/src/navmesh.js","webpack://PhaserNavmesh/./phaser-navmesh.js","webpack://PhaserNavmesh/./phaser-navmesh-plugin.js","webpack://PhaserNavmesh/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","definition","undefined","apply","pathTo","node","curr","path","parent","unshift","astar","search","graph","start","end","options","cleanDirty","heuristic","heuristics","manhattan","closest","openHeap","BinaryHeap","f","closestNode","h","markDirty","push","size","currentNode","pop","closed","neighbors","il","length","neighbor","isWall","gScore","g","getCost","beenVisited","visited","rescoreElement","pos0","pos1","Math","abs","x","y","diagonal","D2","sqrt","d1","d2","min","cleanNode","Graph","gridIn","this","nodes","grid","row","GridNode","init","weight","scoreFunction","content","dirtyNodes","ret","toString","graphString","rowDebug","join","fromNeighbor","element","sinkDown","result","bubbleUp","remove","indexOf","parentN","elemScore","child1Score","child2N","child1N","swap","child1","child2","triarea2","a","b","ax","ay","almostEqual","value1","value2","errorMargin","arguments","angleDifference","PI","j","floor","areCollinear","line1","line2","area1","area2","Vector2","_classCallCheck","v","atan2","dx","dy","navpoly","NavPoly","id","polygon","navpoly_classCallCheck","edges","portals","centroid","_calculateCentroid","boundingRadius","_calculateRadius","points","point","contains","_isPointOnEdge","navPolygon","distance","centroidDistance","vector_2","forEach","add","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","iterator","next","done","err","return","_ref","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","pointOnSegment","NavGraph","navPolygons","navgraph_classCallCheck","navPolygon1","navPolygon2","astar_default","navgraph","src_channel","Channel","channel_classCallCheck","p1","p2","left","right","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","equals","Line","x1","y1","x2","y2","line_classCallCheck","max","top","bottom","pointOnLine","Polygon","polygon_classCallCheck","math_line","first","last","inside","ix","iy","jx","jy","src","NavMesh","meshPolygonPoints","meshShrinkAmount","navmesh_classCallCheck","_meshShrinkAmount","newPolys","map","polyPoints","vectors","math_polygon","_navPolygons","_calculateNeighbors","_graph","destroy","disableDebug","startPoint","endPoint","startPoly","endPoly","startDistance","Number","MAX_VALUE","endDistance","startVector","endVector","navPoly","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_projectPointToPolygon","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","astarPath","navHeuristic","channel","nextNavPolygon","portal","stringPull","lastPoint","phaserPath","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","newPoint","clone","otherNavPoly","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","edge","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","otherEdge","overlap","_getSegmentOverlap","_overlap","_slicedToArray","edgeStartAngle","angle","a1","a2","line","sort","noOverlap","singlePointOverlap","closestProjection","closestDistance","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","projectedPoint","_projectPointToEdge","l2","_distanceSquared","clamp","PhaserNavMesh","plugin","meshPoints","phaser_navmesh_classCallCheck","game","debugGraphics","navMesh","PointClass","Phaser","Point","findPath","graphics","visible","clear","_this","_ref2","_ref2$drawCentroid","drawCentroid","_ref2$drawBounds","drawBounds","_ref2$drawNeighbors","drawNeighbors","_ref2$drawPortals","drawPortals","_ref2$palette","palette","getPolygons","poly","color","lineWidth","beginFill","drawPolygon","Function","concat","_toConsumableArray","getPoints","endFill","drawEllipse","lineStyle","moveTo","lineTo","thickness","alpha","drawShape","removeMesh","scene","PhaserNavMeshPlugin","pluginManager","phaser_navmesh_plugin_classCallCheck","_possibleConstructorReturn","__proto__","getPrototypeOf","phaserNavMeshes","Plugin","systems","events","values","objectLayer","console","warn","polygons","obj","height","width","mesh","phaser_navmesh","__webpack_exports__"],"mappings":"CAAA,SAAAA,EAAAC,GACA,iBAAAC,SAAA,iBAAAC,OACAA,OAAAD,QAAAD,IACA,mBAAAG,eAAAC,IACAD,UAAAH,GACA,iBAAAC,QACAA,QAAA,cAAAD,IAEAD,EAAA,cAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,IACAC,EAAAD,EACAE,GAAA,EACAT,YAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,oBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,qBClFA,IAAAC,EAAAC,EAAAC,GAMA,SAAAC,GAEA,iBAAA1C,GAAA,iBAAAA,EAAAD,QACAC,EAAAD,QAAA2C,KAEAF,UAAAG,KAAAF,EAAA,mBAAAF,EAAA,GAAAA,EAAAK,WACG7C,EADHyC,GAAAD,KAAAvC,EAAAD,QAAA0C,IALA,CAWC,WAED,SAAAI,EAAAC,GAGA,IAFA,IAAAC,EAAAD,EACAE,KACAD,EAAAE,QACAD,EAAAE,QAAAH,GACAA,IAAAE,OAEA,OAAAD,EASA,IAAAG,GAYAC,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAH,EAAAI,aAEA,IAAAC,GADAF,SACAE,WAAAP,EAAAQ,WAAAC,UACAC,EAAAL,EAAAK,UAAA,EAEAC,EAvBA,IAAAC,EAAA,SAAAjB,GACA,OAAAA,EAAAkB,IAuBAC,EAAAX,EAOA,IALAA,EAAAY,EAAAR,EAAAJ,EAAAC,GACAF,EAAAc,UAAAb,GAEAQ,EAAAM,KAAAd,GAEAQ,EAAAO,OAAA,IAGA,IAAAC,EAAAR,EAAAS,MAGA,GAAAD,IAAAf,EACA,OAAAV,EAAAyB,GAIAA,EAAAE,QAAA,EAKA,IAFA,IAAAC,EAAApB,EAAAoB,UAAAH,GAEA/D,EAAA,EAAAmE,EAAAD,EAAAE,OAA4CpE,EAAAmE,IAAQnE,EAAA,CACpD,IAAAqE,EAAAH,EAAAlE,GAEA,IAAAqE,EAAAJ,SAAAI,EAAAC,SAAA,CAOA,IAAAC,EAAAR,EAAAS,EAAAH,EAAAI,QAAAV,GACAW,EAAAL,EAAAM,UAEAD,GAAAH,EAAAF,EAAAG,KAGAH,EAAAM,SAAA,EACAN,EAAA3B,OAAAqB,EACAM,EAAAV,EAAAU,EAAAV,GAAAR,EAAAkB,EAAArB,GACAqB,EAAAG,EAAAD,EACAF,EAAAZ,EAAAY,EAAAG,EAAAH,EAAAV,EACAb,EAAAc,UAAAS,GACAf,IAGAe,EAAAV,EAAAD,EAAAC,GAAAU,EAAAV,IAAAD,EAAAC,GAAAU,EAAAG,EAAAd,EAAAc,KACAd,EAAAW,GAIAK,EAKAnB,EAAAqB,eAAAP,GAHAd,EAAAM,KAAAQ,MASA,OAAAf,EACAhB,EAAAoB,OAOAN,YACAC,UAAA,SAAAwB,EAAAC,GAGA,OAFAC,KAAAC,IAAAF,EAAAG,EAAAJ,EAAAI,GACAF,KAAAC,IAAAF,EAAAI,EAAAL,EAAAK,IAGAC,SAAA,SAAAN,EAAAC,GACA,IACAM,EAAAL,KAAAM,KAAA,GACAC,EAAAP,KAAAC,IAAAF,EAAAG,EAAAJ,EAAAI,GACAM,EAAAR,KAAAC,IAAAF,EAAAI,EAAAL,EAAAK,GACA,OAJA,GAIAI,EAAAC,IAAAH,EAAA,GAAAL,KAAAS,IAAAF,EAAAC,KAGAE,UAAA,SAAAlD,GACAA,EAAAkB,EAAA,EACAlB,EAAAiC,EAAA,EACAjC,EAAAoB,EAAA,EACApB,EAAAoC,SAAA,EACApC,EAAA0B,QAAA,EACA1B,EAAAG,OAAA,OAUA,SAAAgD,EAAAC,EAAA1C,GACAA,QACA2C,KAAAC,SACAD,KAAAT,WAAAlC,EAAAkC,SACAS,KAAAE,QACA,QAAAb,EAAA,EAAiBA,EAAAU,EAAAvB,OAAmBa,IAAA,CACpCW,KAAAE,KAAAb,MAEA,QAAAC,EAAA,EAAAa,EAAAJ,EAAAV,GAAoCC,EAAAa,EAAA3B,OAAgBc,IAAA,CACpD,IAAA3C,EAAA,IAAAyD,EAAAf,EAAAC,EAAAa,EAAAb,IACAU,KAAAE,KAAAb,GAAAC,GAAA3C,EACAqD,KAAAC,MAAAhC,KAAAtB,IAGAqD,KAAAK,OAsFA,SAAAD,EAAAf,EAAAC,EAAAgB,GACAN,KAAAX,IACAW,KAAAV,IACAU,KAAAM,SAmBA,SAAA1C,EAAA2C,GACAP,KAAAQ,WACAR,KAAAO,gBAsHA,OAjOAT,EAAA9D,UAAAqE,KAAA,WACAL,KAAAS,cACA,QAAArG,EAAA,EAAiBA,EAAA4F,KAAAC,MAAAzB,OAAuBpE,IACxC4C,EAAA6C,UAAAG,KAAAC,MAAA7F,KAIA0F,EAAA9D,UAAAsB,WAAA,WACA,QAAAlD,EAAA,EAAiBA,EAAA4F,KAAAS,WAAAjC,OAA4BpE,IAC7C4C,EAAA6C,UAAAG,KAAAS,WAAArG,IAEA4F,KAAAS,eAGAX,EAAA9D,UAAAgC,UAAA,SAAArB,GACAqD,KAAAS,WAAAxC,KAAAtB,IAGAmD,EAAA9D,UAAAsC,UAAA,SAAA3B,GACA,IAAA+D,KACArB,EAAA1C,EAAA0C,EACAC,EAAA3C,EAAA2C,EACAY,EAAAF,KAAAE,KA4CA,OAzCAA,EAAAb,EAAA,IAAAa,EAAAb,EAAA,GAAAC,IACAoB,EAAAzC,KAAAiC,EAAAb,EAAA,GAAAC,IAIAY,EAAAb,EAAA,IAAAa,EAAAb,EAAA,GAAAC,IACAoB,EAAAzC,KAAAiC,EAAAb,EAAA,GAAAC,IAIAY,EAAAb,IAAAa,EAAAb,GAAAC,EAAA,IACAoB,EAAAzC,KAAAiC,EAAAb,GAAAC,EAAA,IAIAY,EAAAb,IAAAa,EAAAb,GAAAC,EAAA,IACAoB,EAAAzC,KAAAiC,EAAAb,GAAAC,EAAA,IAGAU,KAAAT,WAEAW,EAAAb,EAAA,IAAAa,EAAAb,EAAA,GAAAC,EAAA,IACAoB,EAAAzC,KAAAiC,EAAAb,EAAA,GAAAC,EAAA,IAIAY,EAAAb,EAAA,IAAAa,EAAAb,EAAA,GAAAC,EAAA,IACAoB,EAAAzC,KAAAiC,EAAAb,EAAA,GAAAC,EAAA,IAIAY,EAAAb,EAAA,IAAAa,EAAAb,EAAA,GAAAC,EAAA,IACAoB,EAAAzC,KAAAiC,EAAAb,EAAA,GAAAC,EAAA,IAIAY,EAAAb,EAAA,IAAAa,EAAAb,EAAA,GAAAC,EAAA,IACAoB,EAAAzC,KAAAiC,EAAAb,EAAA,GAAAC,EAAA,KAIAoB,GAGAZ,EAAA9D,UAAA2E,SAAA,WAGA,IAFA,IAAAC,KACAX,EAAAD,KAAAE,KACAb,EAAA,EAAiBA,EAAAY,EAAAzB,OAAkBa,IAAA,CAGnC,IAFA,IAAAwB,KACAV,EAAAF,EAAAZ,GACAC,EAAA,EAAmBA,EAAAa,EAAA3B,OAAgBc,IACnCuB,EAAA5C,KAAAkC,EAAAb,GAAAgB,QAEAM,EAAA3C,KAAA4C,EAAAC,KAAA,MAEA,OAAAF,EAAAE,KAAA,OASAV,EAAApE,UAAA2E,SAAA,WACA,UAAAX,KAAAX,EAAA,IAAAW,KAAAV,EAAA,KAGAc,EAAApE,UAAA6C,QAAA,SAAAkC,GAEA,OAAAA,KAAA1B,GAAAW,KAAAX,GAAA0B,EAAAzB,GAAAU,KAAAV,EACA,QAAAU,KAAAM,OAEAN,KAAAM,QAGAF,EAAApE,UAAA0C,OAAA,WACA,WAAAsB,KAAAM,QAQA1C,EAAA5B,WACAiC,KAAA,SAAA+C,GAEAhB,KAAAQ,QAAAvC,KAAA+C,GAGAhB,KAAAiB,SAAAjB,KAAAQ,QAAAhC,OAAA,IAEAJ,IAAA,WAEA,IAAA8C,EAAAlB,KAAAQ,QAAA,GAEApD,EAAA4C,KAAAQ,QAAApC,MAOA,OAJA4B,KAAAQ,QAAAhC,OAAA,IACAwB,KAAAQ,QAAA,GAAApD,EACA4C,KAAAmB,SAAA,IAEAD,GAEAE,OAAA,SAAAzE,GACA,IAAAvC,EAAA4F,KAAAQ,QAAAa,QAAA1E,GAIAS,EAAA4C,KAAAQ,QAAApC,MAEAhE,IAAA4F,KAAAQ,QAAAhC,OAAA,IACAwB,KAAAQ,QAAApG,GAAAgD,EAEA4C,KAAAO,cAAAnD,GAAA4C,KAAAO,cAAA5D,GACAqD,KAAAiB,SAAA7G,GAEA4F,KAAAmB,SAAA/G,KAIA8D,KAAA,WACA,OAAA8B,KAAAQ,QAAAhC,QAEAQ,eAAA,SAAArC,GACAqD,KAAAiB,SAAAjB,KAAAQ,QAAAa,QAAA1E,KAEAsE,SAAA,SAAApF,GAKA,IAHA,IAAAmF,EAAAhB,KAAAQ,QAAA3E,GAGAA,EAAA,IAGA,IAAAyF,GAAAzF,EAAA,QACAiB,EAAAkD,KAAAQ,QAAAc,GAEA,KAAAtB,KAAAO,cAAAS,GAAAhB,KAAAO,cAAAzD,IAQA,MAPAkD,KAAAQ,QAAAc,GAAAN,EACAhB,KAAAQ,QAAA3E,GAAAiB,EAEAjB,EAAAyF,IAQAH,SAAA,SAAAtF,GAMA,IAJA,IAAA2C,EAAAwB,KAAAQ,QAAAhC,OACAwC,EAAAhB,KAAAQ,QAAA3E,GACA0F,EAAAvB,KAAAO,cAAAS,KAEA,CAEA,IAIAQ,EAJAC,EAAA5F,EAAA,KACA6F,EAAAD,EAAA,EAEAE,EAAA,KAGA,GAAAD,EAAAlD,EAAA,CAEA,IAAAoD,EAAA5B,KAAAQ,QAAAkB,IACAF,EAAAxB,KAAAO,cAAAqB,IAGAL,IACAI,EAAAD,GAKA,GAAAD,EAAAjD,EAAA,CACA,IAAAqD,EAAA7B,KAAAQ,QAAAiB,GACAzB,KAAAO,cAAAsB,IACA,OAAAF,EAAAJ,EAAAC,KACAG,EAAAF,GAKA,UAAAE,EAOA,MANA3B,KAAAQ,QAAA3E,GAAAmE,KAAAQ,QAAAmB,GACA3B,KAAAQ,QAAAmB,GAAAX,EACAnF,EAAA8F,MAWA3E,QACA8C,oEC5YO,SAASgC,EAASC,EAAGC,EAAGvH,GAC7B,IAAMwH,EAAKD,EAAE3C,EAAI0C,EAAE1C,EACb6C,EAAKF,EAAE1C,EAAIyC,EAAEzC,EAGnB,OAFW7E,EAAE4E,EAAI0C,EAAE1C,GAEP6C,EAAKD,GADNxH,EAAE6E,EAAIyC,EAAEzC,GAgBd,SAAS6C,EAAYC,EAAQC,GAA8B,IAAtBC,EAAsBC,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAR,KACxD,OAAIpD,KAAKC,IAAIgD,EAASC,IAAWC,EAQ5B,SAASE,EAAgBnD,EAAGC,GACjC,IAAIyC,EAAI1C,EAAIC,EACNlF,EAAI2H,EAAI5C,KAAKsD,GACbC,EAAc,EAAVvD,KAAKsD,GAGf,OAFAV,EAAI3H,EAAI+E,KAAKwD,MAAMvI,EAAIsI,GAAKA,EAC5BX,GAAK5C,KAAKsD,GAOL,SAASG,EAAaC,EAAOC,GAA6B,IAAtBR,EAAsBC,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAR,KAGjDQ,EAAQjB,EAASe,EAAM1F,MAAO0F,EAAMzF,IAAK0F,EAAM3F,OAC/C6F,EAAQlB,EAASe,EAAM1F,MAAO0F,EAAMzF,IAAK0F,EAAM1F,KACrD,SAAI+E,EAAYY,EAAO,EAAGT,KAAgBH,EAAYa,EAAO,EAAGV,8QCzChE,SAAAW,EAAY5D,EAAGC,gGAAG4D,CAAAlD,KAAAiD,GAChBjD,KAAKX,EAAIA,GAAK,EACdW,KAAKV,EAAIA,GAAK,2CAGT6D,GACL,OAAOnD,KAAKX,IAAM8D,EAAE9D,GAAKW,KAAKV,IAAM6D,EAAE7D,gCAGlC6D,GACJ,OAAOhE,KAAKiE,MAAMD,EAAE7D,EAAIU,KAAKV,EAAG6D,EAAE9D,EAAIW,KAAKX,oCAGpC8D,GACP,IAAME,EAAKF,EAAE9D,EAAIW,KAAKX,EAChBiE,EAAKH,EAAE7D,EAAIU,KAAKV,EACtB,OAAOH,KAAKM,KAAK4D,EAAKA,EAAKC,EAAKA,+BAG9BH,GACFnD,KAAKX,GAAK8D,EAAE9D,EACZW,KAAKV,GAAK6D,EAAE7D,mCAGL6D,GACPnD,KAAKX,GAAK8D,EAAE9D,EACZW,KAAKV,GAAK6D,EAAE7D,kCAIZ,OAAO,IAAI2D,EAAQjD,KAAKX,EAAGW,KAAKV,qQCyDpCiE,aArEE,SAAAC,EAAYC,EAAIC,gGAASC,CAAA3D,KAAAwD,GACvBxD,KAAKyD,GAAKA,EACVzD,KAAK0D,QAAUA,EACf1D,KAAK4D,MAAQF,EAAQE,MACrB5D,KAAK1B,aACL0B,KAAK6D,WACL7D,KAAK8D,SAAW9D,KAAK+D,qBACrB/D,KAAKgE,eAAiBhE,KAAKiE,mBAE3BjE,KAAKM,OAAS,gDAId,OAAON,KAAK0D,QAAQQ,wCAGbC,GAGP,OAAOnE,KAAK0D,QAAQU,SAASD,EAAM9E,EAAG8E,EAAM7E,IAAMU,KAAKqE,eAAeF,qCAItEnE,KAAK1B,aACL0B,KAAK6D,8CAKL,qBAAsB7D,KAAKyD,GAA3B,QAAqCzD,KAAK8D,SAA1C,qCAGA,OAAuB,IAAhB9D,KAAKM,gDAEGgE,GACf,OAAOtE,KAAK8D,SAASS,SAASD,EAAWR,0CAEnCQ,GACN,OAAOtE,KAAKwE,iBAAiBF,gDAM7B,IAAMR,EAAW,IAAIW,EAAQ,EAAG,GAC1BjG,EAASwB,KAAK0D,QAAQQ,OAAO1F,OAInC,OAHAwB,KAAK0D,QAAQQ,OAAOQ,QAAQ,SAAAxI,GAAA,OAAK4H,EAASa,IAAIzI,KAC9C4H,EAASzE,GAAKb,EACdsF,EAASxE,GAAKd,EACPsF,6CAIP,IAAIE,EAAiB,EADJY,GAAA,EAAAC,GAAA,EAAAC,OAAAtI,EAAA,IAEjB,QAAAuI,EAAAC,EAAoBhF,KAAK0D,QAAQQ,OAAjC/I,OAAA8J,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,EAAyC,KAA9BT,EAA8BY,EAAA1J,MACjCX,EAAIsF,KAAK8D,SAASS,SAASJ,GAC7BzJ,EAAIsJ,IAAgBA,EAAiBtJ,IAJ1B,MAAA0K,GAAAP,GAAA,EAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAMjB,OAAOd,4CAGgB,IAAR3E,EAAQiG,EAARjG,EAAGC,EAAKgG,EAALhG,EAAKiG,GAAA,EAAAC,GAAA,EAAAC,OAAAjJ,EAAA,IACvB,QAAAkJ,EAAAC,EAAmB3F,KAAK4D,MAAxBzI,OAAA8J,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAA+B,CAC7B,GAD6BG,EAAArK,MACpBuK,eAAevG,EAAGC,GAAI,OAAO,GAFjB,MAAA8F,GAAAI,GAAA,EAAAC,EAAAL,EAAA,aAAAG,GAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,GAIvB,OAAO,oQCnFLI,aACJ,SAAAA,EAAYC,gGAAaC,CAAA/F,KAAA6F,GACvB7F,KAAKC,MAAQ6F,EACb9F,KAAKK,mDAGGiE,GACR,OAAOA,EAAWhG,+CAGP0H,EAAaC,GACxB,OAAOD,EAAYxB,iBAAiByB,qCAIpCjG,KAAK1C,aACL0C,KAAKC,kBAIT4F,EAAS7J,UAAUqE,KAAO6F,EAAAnE,EAAQjC,MAAM9D,UAAUqE,KAClDwF,EAAS7J,UAAUsB,WAAa4I,EAAAnE,EAAQjC,MAAM9D,UAAUsB,WACxDuI,EAAS7J,UAAUgC,UAAYkI,EAAAnE,EAAQjC,MAAM9D,UAAUgC,UAEvD,IAAAmI,EAAA,2PCgFAC,aAxGE,SAAAC,iGAAcC,CAAAtG,KAAAqG,GACZrG,KAAK6D,kDASF0C,GAAe,IAAXC,EAAWjE,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAN,KACD,OAAPiE,IAAaA,EAAKD,GACtBvG,KAAK6D,QAAQ5F,MACXwI,KAAMF,EACNG,MAAOF,yCAKT,IAGIG,EAAYC,EAAYC,EAHxBhD,EAAU7D,KAAK6D,QACfiD,KAGAC,EAAY,EACdC,EAAY,EACZC,EAAa,EAEfN,EAAa9C,EAAQ,GAAG4C,KACxBG,EAAa/C,EAAQ,GAAG4C,KACxBI,EAAchD,EAAQ,GAAG6C,MAGzBI,EAAI7I,KAAK0I,GAET,IAAK,IAAIvM,EAAI,EAAGA,EAAIyJ,EAAQrF,OAAQpE,IAAK,CAEvC,IAAIqM,EAAO5C,EAAQzJ,GAAGqM,KAClBC,EAAQ7C,EAAQzJ,GAAGsM,MAGvB,GAAI5E,EAAS6E,EAAYE,EAAaH,IAAU,EAAK,CACnD,KAAIC,EAAWO,OAAOL,IAAgB/E,EAAS6E,EAAYC,EAAYF,GAAS,GAIzE,CAGLI,EAAI7I,KAAK2I,GAQTA,EAHAD,EAAaC,EAIbC,EAAcF,EACdK,EAJAD,EAAYC,EAKZC,EAAaF,EAEb3M,EAAI2M,EACJ,SAnBAF,EAAcH,EACdO,EAAa7M,EAuBjB,GAAI0H,EAAS6E,EAAYC,EAAYH,IAAS,EAAK,CACjD,KAAIE,EAAWO,OAAON,IAAe9E,EAAS6E,EAAYE,EAAaJ,GAAQ,GAIxE,CAGLK,EAAI7I,KAAK4I,GAQTD,EAHAD,EAAaE,EAIbA,EAAcF,EACdK,EAJAD,EAAYE,EAKZA,EAAaF,EAEb3M,EAAI2M,EACJ,SAnBAH,EAAaH,EACbO,EAAY5M,GA6BlB,OANmB,IAAf0M,EAAItI,QAAiBsI,EAAIA,EAAItI,OAAS,GAAG0I,OAAOrD,EAAQA,EAAQrF,OAAS,GAAGiI,OAE9EK,EAAI7I,KAAK4F,EAAQA,EAAQrF,OAAS,GAAGiI,MAGvCzG,KAAKnD,KAAOiK,EACLA,iRCpGT,SAAAK,EAAYC,EAAIC,EAAIC,EAAIC,gGAAIC,CAAAxH,KAAAmH,GAC1BnH,KAAK7C,MAAQ,IAAIsH,EAAQ2C,EAAIC,GAC7BrH,KAAK5C,IAAM,IAAIqH,EAAQ6C,EAAIC,GAE3BvH,KAAKyG,KAAOtH,KAAKS,IAAIwH,EAAIE,GACzBtH,KAAK0G,MAAQvH,KAAKsI,IAAIL,EAAIE,GAC1BtH,KAAK0H,IAAMvI,KAAKS,IAAIyH,EAAIE,GACxBvH,KAAK2H,OAASxI,KAAKsI,IAAIJ,EAAIE,oDAGdlI,EAAGC,GAChB,OACED,GAAKW,KAAKyG,MACVpH,GAAKW,KAAK0G,OACVpH,GAAKU,KAAK0H,KACVpI,GAAKU,KAAK2H,QACV3H,KAAK4H,YAAYvI,EAAGC,uCAIZD,EAAGC,GAEb,OAAQD,EAAIW,KAAKyG,OAASzG,KAAK2H,OAAS3H,KAAK0H,OAAU1H,KAAK0G,MAAQ1G,KAAKyG,OAASnH,EAAIU,KAAK0H,oRCtB7F,SAAAG,EAAY3D,GAAuB,IAAf7F,IAAekE,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,KAAAA,UAAA,gGAAAuF,CAAA9H,KAAA6H,GACjC7H,KAAKkE,OAASA,EACdlE,KAAK4D,SAEL,IAAK,IAAIxJ,EAAI,EAAGA,EAAI8J,EAAO1F,OAAQpE,IAAK,CACtC,IAAMmM,EAAKrC,EAAO9J,EAAI,GAChBoM,EAAKtC,EAAO9J,GAClB4F,KAAK4D,MAAM3F,KAAK,IAAI8J,EAAKxB,EAAGlH,EAAGkH,EAAGjH,EAAGkH,EAAGnH,EAAGmH,EAAGlH,IAEhD,GAAIjB,EAAQ,CACV,IAAM2J,EAAQ9D,EAAO,GACf+D,EAAO/D,EAAOA,EAAO1F,OAAS,GACpCwB,KAAK4D,MAAM3F,KAAK,IAAI8J,EAAKC,EAAM3I,EAAG2I,EAAM1I,EAAG2I,EAAK5I,EAAG4I,EAAK3I,gDAInDD,EAAGC,GAGV,IAFA,IAAI4I,GAAS,EAEJ9N,GAAK,EAAGsI,EAAI1C,KAAKkE,OAAO1F,OAAS,IAAKpE,EAAI4F,KAAKkE,OAAO1F,OAAQkE,EAAItI,EAAG,CAC5E,IAAM+N,EAAKnI,KAAKkE,OAAO9J,GAAGiF,EACpB+I,EAAKpI,KAAKkE,OAAO9J,GAAGkF,EAEpB+I,EAAKrI,KAAKkE,OAAOxB,GAAGrD,EACpBiJ,EAAKtI,KAAKkE,OAAOxB,GAAGpD,GAGtB8I,GAAM9I,GAAKA,EAAIgJ,GAAQA,GAAMhJ,GAAKA,EAAI8I,IACxC/I,GAAMgJ,EAAKF,IAAO7I,EAAI8I,IAAQE,EAAKF,GAAMD,IAEzCD,GAAUA,GAId,OAAOA,uqBCzCXK,aC0BE,SAAAC,EAAYC,GAAyC,IAAtBC,EAAsBnG,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAH,+FAAGoG,CAAA3I,KAAAwI,GACnDxI,KAAK4I,kBAAoBF,EAGzB,IAAMG,EAAWJ,EAAkBK,IAAI,SAAAC,GACrC,IAAMC,EAAUD,EAAWD,IAAI,SAAA5M,GAAA,OAAK,IAAIuI,EAAQvI,EAAEmD,EAAGnD,EAAEoD,KACvD,OAAO,IAAI2J,EAAQD,KAIrBhJ,KAAKkJ,aAAeL,EAASC,IAAI,SAACpF,EAAStJ,GAAV,OAAgB,IAAImJ,EAAQnJ,EAAGsJ,KAEhE1D,KAAKmJ,sBAGLnJ,KAAKoJ,OAAS,IAAIjD,EAASnG,KAAKkJ,8DAIhC,OAAOlJ,KAAKkJ,+CAWZlJ,KAAKoJ,OAAOC,UADJ,IAAAzE,GAAA,EAAAC,GAAA,EAAAC,OAAAtI,EAAA,IAER,QAAAuI,EAAAC,EAAmBhF,KAAKkJ,aAAxB/N,OAAA8J,cAAAL,GAAAG,EAAAC,EAAAE,QAAAC,MAAAP,GAAA,GAAAG,EAAA1J,MAA2CgO,WAFnC,MAAAjE,GAAAP,GAAA,EAAAC,EAAAM,EAAA,aAAAR,GAAAI,EAAAK,QAAAL,EAAAK,SAAA,WAAAR,EAAA,MAAAC,GAGR9E,KAAKkJ,gBAELlJ,KAAKsJ,gDAYEC,EAAYC,GACnB,IAAIC,EAAY,KACZC,EAAU,KACVC,EAAgBC,OAAOC,UACvBC,EAAcF,OAAOC,UACrBnP,SAAGQ,SACD6O,EAAc,IAAItF,EAAQ8E,EAAWlK,EAAGkK,EAAWjK,GACnD0K,EAAY,IAAIvF,EAAQ+E,EAASnK,EAAGmK,EAASlK,GAPtBiG,GAAA,EAAAC,GAAA,EAAAC,OAAAjJ,EAAA,IAU7B,QAAAkJ,EAAAC,EAAsB3F,KAAKkJ,aAA3B/N,OAAA8J,cAAAM,GAAAG,EAAAC,EAAAT,QAAAC,MAAAI,GAAA,EAAyC,KAA9B0E,EAA8BvE,EAAArK,MACvCH,EAAI+O,EAAQjG,gBAEZtJ,EAAIuP,EAAQnG,SAASS,SAASwF,KACrBJ,GAAiBjP,GAAKQ,GAAK+O,EAAQ7F,SAAS2F,KACnDN,EAAYQ,EACZN,EAAgBjP,IAGlBA,EAAIuP,EAAQnG,SAASS,SAASyF,KACrBF,GAAepP,GAAKQ,GAAK+O,EAAQ7F,SAAS4F,KACjDN,EAAUO,EACVH,EAAcpP,IAtBW,MAAA0K,GAAAI,GAAA,EAAAC,EAAAL,EAAA,aAAAG,GAAAI,EAAAN,QAAAM,EAAAN,SAAA,WAAAG,EAAA,MAAAC,GA4B7B,IAAKgE,GAAazJ,KAAK4I,kBAAoB,EAAG,KAAAsB,GAAA,EAAAC,GAAA,EAAAC,OAAA5N,EAAA,IAC5C,QAAA6N,EAAAC,EAAsBtK,KAAKkJ,aAA3B/N,OAAA8J,cAAAiF,GAAAG,EAAAC,EAAApF,QAAAC,MAAA+E,GAAA,EAAyC,KAA9BD,EAA8BI,EAAAhP,MAIvC,GAFAH,EAAI+O,EAAQjG,eAAiBhE,KAAK4I,mBAClClO,EAAIuP,EAAQnG,SAASS,SAASwF,KACrB7O,EAAG,KAGFqJ,EAAavE,KAAKuK,uBAAuBR,EAAaE,GAAtD1F,SACJA,GAAYvE,KAAK4I,mBAAqBrE,EAAWoF,IACnDF,EAAYQ,EACZN,EAAgBpF,KAXsB,MAAAa,GAAA+E,GAAA,EAAAC,EAAAhF,EAAA,aAAA8E,GAAAI,EAAAjF,QAAAiF,EAAAjF,SAAA,WAAA8E,EAAA,MAAAC,IAkB9C,IAAKV,GAAW1J,KAAK4I,kBAAoB,EAAG,KAAA4B,GAAA,EAAAC,GAAA,EAAAC,OAAAlO,EAAA,IAC1C,QAAAmO,EAAAC,EAAsB5K,KAAKkJ,aAA3B/N,OAAA8J,cAAAuF,GAAAG,EAAAC,EAAA1F,QAAAC,MAAAqF,GAAA,EAAyC,KAA9BP,EAA8BU,EAAAtP,MAGvC,GAFAH,EAAI+O,EAAQjG,eAAiBhE,KAAK4I,mBAClClO,EAAIuP,EAAQnG,SAASS,SAASyF,KACrB9O,EAAG,KACFqJ,EAAavE,KAAKuK,uBAAuBP,EAAWC,GAApD1F,SACJA,GAAYvE,KAAK4I,mBAAqBrE,EAAWuF,IACnDJ,EAAUO,EACVH,EAAcvF,KARsB,MAAAa,GAAAqF,GAAA,EAAAC,EAAAtF,EAAA,aAAAoF,GAAAI,EAAAvF,QAAAuF,EAAAvF,SAAA,WAAAoF,EAAA,MAAAC,IAe5C,IAAKjB,IAAcC,EAAS,OAAO,KAGnC,GAAID,IAAcC,EAAS,OAAQK,EAAaC,GAGhD,IAAMa,EAAY3E,EAAAnE,EAAQ/E,MAAMC,OAAO+C,KAAKoJ,OAAQK,EAAWC,GAC7DnM,UAAWyC,KAAKoJ,OAAO0B,eAIzB,GAAyB,IAArBD,EAAUrM,OAAc,OAAO,KAGnCqM,EAAU9N,QAAQ0M,GAGlB,IAAMsB,EAAU,IAAI3E,EACpB2E,EAAQ9M,KAAK8L,GACb,IAAK,IAAI3P,EAAI,EAAGA,EAAIyQ,EAAUrM,OAAS,EAAGpE,IAAK,CAM7C,IALA,IAAMkK,EAAauG,EAAUzQ,GACvB4Q,EAAiBH,EAAUzQ,EAAI,GAGjC6Q,EAAS,KACJ7Q,EAAI,EAAGA,EAAIkK,EAAWhG,UAAUE,OAAQpE,IAC3CkK,EAAWhG,UAAUlE,GAAGqJ,KAAOuH,EAAevH,KAChDwH,EAAS3G,EAAWT,QAAQzJ,IAKhC2Q,EAAQ9M,KAAKgN,EAAO9N,MAAO8N,EAAO7N,KAEpC2N,EAAQ9M,KAAK+L,GAGbe,EAAQG,aAGR,IAAIC,EAAY,KACVC,KAtGuBC,GAAA,EAAAC,GAAA,EAAAC,OAAA/O,EAAA,IAuG7B,QAAAgP,EAAAC,EAAgBV,EAAQlO,KAAxB1B,OAAA8J,cAAAoG,GAAAG,EAAAC,EAAAvG,QAAAC,MAAAkG,GAAA,EAA8B,KACtBK,EADsBF,EAAAnQ,MACTsQ,QACdR,GAAcO,EAASxE,OAAOiE,IAAYC,EAAWnN,KAAKyN,GAC/DP,EAAYO,GA1Ge,MAAAtG,GAAAkG,GAAA,EAAAC,EAAAnG,EAAA,aAAAiG,GAAAI,EAAApG,QAAAoG,EAAApG,SAAA,WAAAiG,EAAA,MAAAC,GA6G7B,OAAOH,gDAKP,IAAK,IAAIhR,EAAI,EAAGA,EAAI4F,KAAKkJ,aAAa1K,OAAQpE,IAG5C,IAFA,IAAM6P,EAAUjK,KAAKkJ,aAAa9O,GAEzBsI,EAAItI,EAAI,EAAGsI,EAAI1C,KAAKkJ,aAAa1K,OAAQkE,IAAK,CACrD,IAAMkJ,EAAe5L,KAAKkJ,aAAaxG,GAIvC,KADUuH,EAAQnG,SAASS,SAASqH,EAAa9H,UACzCmG,EAAQjG,eAAiB4H,EAAa5H,gBAA9C,CALqD,IAAA6H,GAAA,EAAAC,GAAA,EAAAC,OAAAvP,EAAA,IAQrD,QAAAwP,EAAAC,EAAmBhC,EAAQrG,MAA3BzI,OAAA8J,cAAA4G,GAAAG,EAAAC,EAAA/G,QAAAC,MAAA0G,GAAA,EAAkC,KAAvBK,EAAuBF,EAAA3Q,MAAA8Q,GAAA,EAAAC,GAAA,EAAAC,OAAA7P,EAAA,IAChC,QAAA8P,EAAAC,EAAwBX,EAAahI,MAArCzI,OAAA8J,cAAAkH,GAAAG,EAAAC,EAAArH,QAAAC,MAAAgH,GAAA,EAA4C,KAAjCK,EAAiCF,EAAAjR,MAE1C,GAAKuH,EAAasJ,EAAMM,GAAxB,CAGA,IAAMC,EAAUzM,KAAK0M,mBAAmBR,EAAMM,GAC9C,GAAKC,EAAL,CAGAxC,EAAQ3L,UAAUL,KAAK2N,GACvBA,EAAatN,UAAUL,KAAKgM,GAVc,IAAA0C,EAAAC,EAczBH,EAdyB,GAcnClG,EAdmCoG,EAAA,GAc/BnG,EAd+BmG,EAAA,GAetCE,EAAiB5C,EAAQnG,SAASgJ,MAAMZ,EAAK/O,OAC7C4P,EAAK9C,EAAQnG,SAASgJ,MAAML,EAAQ,IACpCO,EAAK/C,EAAQnG,SAASgJ,MAAML,EAAQ,IACpC/M,EAAK8C,EAAgBqK,EAAgBE,GACrCpN,EAAK6C,EAAgBqK,EAAgBG,GACrCtN,EAAKC,EACPsK,EAAQpG,QAAQ5F,KAAK,IAAI8J,EAAKxB,EAAGlH,EAAGkH,EAAGjH,EAAGkH,EAAGnH,EAAGmH,EAAGlH,IAEnD2K,EAAQpG,QAAQ5F,KAAK,IAAI8J,EAAKvB,EAAGnH,EAAGmH,EAAGlH,EAAGiH,EAAGlH,EAAGkH,EAAGjH,IAGrDuN,EAAiBjB,EAAa9H,SAASgJ,MAAMN,EAAUrP,OACvD4P,EAAKnB,EAAa9H,SAASgJ,MAAML,EAAQ,IACzCO,EAAKpB,EAAa9H,SAASgJ,MAAML,EAAQ,KACzC/M,EAAK8C,EAAgBqK,EAAgBE,KACrCpN,EAAK6C,EAAgBqK,EAAgBG,IAEnCpB,EAAa/H,QAAQ5F,KAAK,IAAI8J,EAAKxB,EAAGlH,EAAGkH,EAAGjH,EAAGkH,EAAGnH,EAAGmH,EAAGlH,IAExDsM,EAAa/H,QAAQ5F,KAAK,IAAI8J,EAAKvB,EAAGnH,EAAGmH,EAAGlH,EAAGiH,EAAGlH,EAAGkH,EAAGjH,OAnC5B,MAAA8F,GAAAgH,GAAA,EAAAC,EAAAjH,EAAA,aAAA+G,GAAAI,EAAAlH,QAAAkH,EAAAlH,SAAA,WAAA+G,EAAA,MAAAC,KARmB,MAAAjH,GAAA0G,GAAA,EAAAC,EAAA3G,EAAA,aAAAyG,GAAAI,EAAA5G,QAAA4G,EAAA5G,SAAA,WAAAyG,EAAA,MAAAC,iDAwDxClJ,EAAOC,GACxB,IAAMoB,IACF+I,KAAMpK,EAAOsB,MAAOtB,EAAM1F,QAC1B8P,KAAMpK,EAAOsB,MAAOtB,EAAMzF,MAC1B6P,KAAMnK,EAAOqB,MAAOrB,EAAM3F,QAC1B8P,KAAMnK,EAAOqB,MAAOrB,EAAM1F,MAE9B8G,EAAOgJ,KAAK,SAASnL,EAAGC,GACtB,OAAID,EAAEoC,MAAM9E,EAAI2C,EAAEmC,MAAM9E,GAAW,EAC1B0C,EAAEoC,MAAM9E,EAAI2C,EAAEmC,MAAM9E,EAAU,EAEjC0C,EAAEoC,MAAM7E,EAAI0C,EAAEmC,MAAM7E,GAAW,EAC1ByC,EAAEoC,MAAM7E,EAAI0C,EAAEmC,MAAM7E,EAAU,EAC3B,IAIhB,IAAM6N,EAAYjJ,EAAO,GAAG+I,OAAS/I,EAAO,GAAG+I,KAGzCG,EAAqBlJ,EAAO,GAAGC,MAAM+C,OAAOhD,EAAO,GAAGC,OAC5D,OAAIgJ,GAAaC,EAA2B,MAC/BlJ,EAAO,GAAGC,MAAOD,EAAO,GAAGC,sDAanBA,EAAO8F,GAC5B,IAAIoD,EAAoB,KACpBC,EAAkB1D,OAAOC,UAFQ0D,GAAA,EAAAC,GAAA,EAAAC,OAAAjR,EAAA,IAGrC,QAAAkR,EAAAC,EAAmB1D,EAAQrG,MAA3BzI,OAAA8J,cAAAsI,GAAAG,EAAAC,EAAAzI,QAAAC,MAAAoI,GAAA,EAAkC,KAAvBrB,EAAuBwB,EAAArS,MAC1BuS,EAAiB5N,KAAK6N,oBAAoB1J,EAAO+H,GACjDxR,EAAIyJ,EAAMI,SAASqJ,IACC,OAAtBP,GAA8B3S,EAAI4S,KACpCA,EAAkB5S,EAClB2S,EAAoBO,IARa,MAAAxI,GAAAoI,GAAA,EAAAC,EAAArI,EAAA,aAAAmI,GAAAI,EAAAtI,QAAAsI,EAAAtI,SAAA,WAAAmI,EAAA,MAAAC,GAWrC,OAAStJ,MAAOkJ,EAAmB9I,SAAU+I,4CAG9BvL,EAAGC,GAClB,IAAMqB,EAAKrB,EAAE3C,EAAI0C,EAAE1C,EACbiE,EAAKtB,EAAE1C,EAAIyC,EAAEzC,EACnB,OAAO+D,EAAKA,EAAKC,EAAKA,8CAKJa,EAAO8I,GACzB,IAAMlL,EAAIkL,EAAK9P,MACT6E,EAAIiL,EAAK7P,IAIT0Q,EAAK9N,KAAK+N,iBAAiBhM,EAAGC,GAChC1G,IAAM6I,EAAM9E,EAAI0C,EAAE1C,IAAM2C,EAAE3C,EAAI0C,EAAE1C,IAAM8E,EAAM7E,EAAIyC,EAAEzC,IAAM0C,EAAE1C,EAAIyC,EAAEzC,IAAMwO,EAK1E,OAHAxS,ER1SG,SAAeD,EAAOuE,EAAK6H,GAGhC,OAFIpM,EAAQuE,IAAKvE,EAAQuE,GACrBvE,EAAQoM,IAAKpM,EAAQoM,GAClBpM,EQuSD2S,CAAM1S,EAAG,EAAG,GAEN,IAAImJ,EAAQ1C,EAAE1C,EAAI/D,GAAK0G,EAAE3C,EAAI0C,EAAE1C,GAAI0C,EAAEzC,EAAIhE,GAAK0G,EAAE1C,EAAIyC,EAAEzC,2YCrTlE,SAAA2O,EAAYC,EAAQvS,EAAKwS,GAAkC,IAAtBzF,EAAsBnG,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAH,+FAAG6L,CAAApO,KAAAiO,GACzDjO,KAAKrE,IAAMA,EACXqE,KAAKkO,OAASA,EACdlO,KAAKqO,KAAOH,EAAOG,KACnBrO,KAAKsO,cAAgB,KACrBtO,KAAKuO,QAAU,IAAIhG,EAAQ4F,EAAYzF,8CAGhCa,EAAYC,GAAqC,IAA3BgF,EAA2BjM,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAdkM,OAAOC,MAC3C7R,EAAOmD,KAAKuO,QAAQI,SAASpF,EAAYC,GAC/C,OAAO3M,EAAOA,EAAKiM,IAAI,SAAAxD,GAAA,IAAGjG,EAAHiG,EAAGjG,EAAGC,EAANgG,EAAMhG,EAAN,OAAc,IAAIkP,EAAWnP,EAAGC,KAAMzC,sCAGnD+R,GAUV,OATKA,GAAa5O,KAAKsO,cAEZM,IACL5O,KAAKsO,eAAetO,KAAKsO,cAAcjF,UAC3CrJ,KAAKsO,cAAgBM,GAHrB5O,KAAKsO,cAAgBtO,KAAKqO,KAAK1J,IAAIiK,WAMrC5O,KAAKsO,cAAcO,SAAU,EAEtB7O,KAAKsO,qDAIRtO,KAAKsO,gBAAetO,KAAKsO,cAAcO,SAAU,4CAIrD,OAAO7O,KAAKsO,eAAiBtO,KAAKsO,cAAcO,iDAI5C7O,KAAKsO,eAAetO,KAAKsO,cAAcQ,gDAmBrC,IAAAC,EAAA/O,KAAAgP,EAAAzM,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,MAAA0M,EAAAD,EALNE,oBAKM1S,IAAAyS,KAAAE,EAAAH,EAJNI,kBAIM5S,IAAA2S,KAAAE,EAAAL,EAHNM,qBAGM9S,IAAA6S,KAAAE,EAAAP,EAFNQ,mBAEMhT,IAAA+S,KAAAE,EAAAT,EADNU,eACMlT,IAAAiT,GADK,MAAU,QAAU,SAAU,SAAU,UAC7CA,EACDzP,KAAKsO,eAEOtO,KAAKuO,QAAQoB,cAErBjL,QAAQ,SAAAkL,GACf,IAAMC,EAAQH,EAAQE,EAAKnM,GAAKiM,EAAQlR,QAYxC,GAXAuQ,EAAKT,cAAcwB,UAAY,EAC/Bf,EAAKT,cAAcyB,UAAUF,GAC7Bd,EAAKT,cAAc0B,YAAnB,IAAAC,SAAAjU,UAAAJ,KAAAa,MAAmCgS,OAAO5G,SAA1C,MAAAqI,OAAAC,EAAqDP,EAAKQ,iBAC1DrB,EAAKT,cAAc+B,UAEfnB,IACFH,EAAKT,cAAcyB,UAAU,GAC7BhB,EAAKT,cAAcgC,YAAYV,EAAK9L,SAASzE,EAAGuQ,EAAK9L,SAASxE,EAAG,EAAG,GACpEyP,EAAKT,cAAc+B,WAGjBjB,EAAY,CACdL,EAAKT,cAAciC,UAAU,EAAG,UAChC,IAAMrV,EAAI0U,EAAK5L,eACf+K,EAAKT,cAAcgC,YAAYV,EAAK9L,SAASzE,EAAGuQ,EAAK9L,SAASxE,EAAGpE,EAAGA,GAGlEoU,IACFP,EAAKT,cAAciC,UAAU,EAAG,GAChCX,EAAKtR,UAAUoG,QAAQ,SAAA7I,GACrBkT,EAAKT,cAAckC,OAAOZ,EAAK9L,SAASzE,EAAGuQ,EAAK9L,SAASxE,GACzDyP,EAAKT,cAAcmC,OAAO5U,EAAEiI,SAASzE,EAAGxD,EAAEiI,SAASxE,MAInDkQ,IACFT,EAAKT,cAAciC,UAAU,GAAI,GACjCX,EAAK/L,QAAQa,QAAQ,SAAAuG,GACnB8D,EAAKT,cAAckC,OAAOvF,EAAO9N,MAAMkC,EAAG4L,EAAO9N,MAAMmC,GACvDyP,EAAKT,cAAcmC,OAAOxF,EAAO7N,IAAIiC,EAAG4L,EAAO7N,IAAIkC,8CAa7CzC,GAAmD,IAA7CgT,EAA6CtN,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAArC,MAAUmO,EAA2BnO,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAf,GAAIoO,EAAWpO,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAH,EAC5D,GAAKvC,KAAKsO,eAENzR,GAAQA,EAAK2B,OAAQ,CAEvBwB,KAAKsO,cAAciC,UAAUG,EAAWb,EAAOc,GAC/C3Q,KAAKsO,cAAcsC,UAAnB,IAAAX,SAAAjU,UAAAJ,KAAAa,MAAiCgS,OAAO5G,SAAxC,MAAAqI,OAAAC,EAAmDtT,OAGnDmD,KAAKsO,cAAcyB,UAAUF,EAAOc,GACpC,IAAMjW,EAAI,GAAMgW,EAEhB,GADA1Q,KAAKsO,cAAcgC,YAAYzT,EAAK,GAAGwC,EAAGxC,EAAK,GAAGyC,EAAG5E,EAAGA,GACpDmC,EAAK2B,OAAS,EAAG,CACnB,IAAM2M,EAAYtO,EAAKA,EAAK2B,OAAS,GACrCwB,KAAKsO,cAAcgC,YAAYnF,EAAU9L,EAAG8L,EAAU7L,EAAG5E,EAAGA,GAE9DsF,KAAKsO,cAAc+B,6CAKjBrQ,KAAKuO,SAASvO,KAAKuO,QAAQlF,UAC3BrJ,KAAKsO,eAAetO,KAAKsO,cAAcjF,UAC3CrJ,KAAKkO,OAAO2C,WAAW7Q,KAAKrE,KAC5BqE,KAAKuO,aAAU/R,EACfwD,KAAKsO,mBAAgB9R,EACrBwD,KAAKkO,YAAS1R,EACdwD,KAAK8Q,WAAQtU,kRC9Hf,SAAAuU,EAAY1C,EAAM2C,gGAAeC,CAAAjR,KAAA+Q,GAAA,IAAAhC,mKAAAmC,CAAAlR,MAAA+Q,EAAAI,WAAArW,OAAAsW,eAAAL,IAAAxW,KAAAyF,KACzBqO,EAAM2C,IADmB,OAG/BjC,EAAKsC,mBAH0BtC,qUADcN,OAAO6C,6CAQpDtR,KAAKuR,QAAQC,OAAO1W,OAAO2W,OAAOzR,KAAKqR,iBAAiB3M,QAAQ,SAAAlK,GAAA,OAAKA,EAAE6O,YACvErJ,KAAKqR,mBACLrR,KAAKqO,UAAO7R,qCAGHb,GACLqE,KAAKqR,gBAAgB1V,KACvBqE,KAAKqR,gBAAgB1V,GAAK0N,UAC1BrJ,KAAKqR,gBAAgB1V,QAAOa,8CAiBbb,EAAK+V,GAAmC,IAAtBhJ,EAAsBnG,UAAA/D,OAAA,QAAAhC,IAAA+F,UAAA,GAAAA,UAAA,GAAH,EACtD,GAAIvC,KAAKqR,gBAAgB1V,GAEvB,OADAgW,QAAQC,KAAR,+DAA4EjW,GACrEqE,KAAKqR,gBAAgB1V,GAGzB+V,GAAsC,IAAvBA,EAAYlT,QAC9BmT,QAAQC,KAAR,wEAC0EF,GAK5E,IAIMG,GAJUH,OAIS5I,IAAI,SAAAgJ,GAC3B,IAAMpK,EAAMoK,EAAIxS,EACVqI,EAASmK,EAAIxS,EAAIwS,EAAIC,OACrBtL,EAAOqL,EAAIzS,EACXqH,EAAQoL,EAAIzS,EAAIyS,EAAIE,MAC1B,QACI3S,EAAGoH,EAAMnH,EAAGoI,IACZrI,EAAGoH,EAAMnH,EAAGqI,IACZtI,EAAGqH,EAAOpH,EAAGqI,IACbtI,EAAGqH,EAAOpH,EAAGoI,MAIbuK,EAAO,IAAIC,EAAclS,KAAMrE,EAAKkW,EAAUnJ,GAIpD,OAFA1I,KAAKqR,gBAAgB1V,GAAOsW,EAErBA,uDCzEXE,EAAA","file":"phaser-navmesh.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhaserNavmesh\"] = factory();\n\telse\n\t\troot[\"PhaserNavmesh\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// javascript-astar 0.4.2\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a Binary Heap.\n// Includes Binary Heap (with modifications) from Marijn Haverbeke.\n// http://eloquentjavascript.net/appendix2.html\n(function(definition) {\n  /* global module, define */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = definition();\n  } else if (typeof define === 'function' && define.amd) {\n    define([], definition);\n  } else {\n    var exports = definition();\n    window.astar = exports.astar;\n    window.Graph = exports.Graph;\n  }\n})(function() {\n\nfunction pathTo(node) {\n  var curr = node;\n  var path = [];\n  while (curr.parent) {\n    path.unshift(curr);\n    curr = curr.parent;\n  }\n  return path;\n}\n\nfunction getHeap() {\n  return new BinaryHeap(function(node) {\n    return node.f;\n  });\n}\n\nvar astar = {\n  /**\n  * Perform an A* Search on a graph given a start and end node.\n  * @param {Graph} graph\n  * @param {GridNode} start\n  * @param {GridNode} end\n  * @param {Object} [options]\n  * @param {bool} [options.closest] Specifies whether to return the\n             path to the closest node if the target is unreachable.\n  * @param {Function} [options.heuristic] Heuristic function (see\n  *          astar.heuristics).\n  */\n  search: function(graph, start, end, options) {\n    graph.cleanDirty();\n    options = options || {};\n    var heuristic = options.heuristic || astar.heuristics.manhattan;\n    var closest = options.closest || false;\n\n    var openHeap = getHeap();\n    var closestNode = start; // set the start node to be the closest if required\n\n    start.h = heuristic(start, end);\n    graph.markDirty(start);\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      var currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        return pathTo(currentNode);\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbors.\n      currentNode.closed = true;\n\n      // Find all neighbors for the current node.\n      var neighbors = graph.neighbors(currentNode);\n\n      for (var i = 0, il = neighbors.length; i < il; ++i) {\n        var neighbor = neighbors[i];\n\n        if (neighbor.closed || neighbor.isWall()) {\n          // Not a valid node to process, skip to next neighbor.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbor is the shortest one we have seen yet.\n        var gScore = currentNode.g + neighbor.getCost(currentNode);\n        var beenVisited = neighbor.visited;\n\n        if (!beenVisited || gScore < neighbor.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbor.visited = true;\n          neighbor.parent = currentNode;\n          neighbor.h = neighbor.h || heuristic(neighbor, end);\n          neighbor.g = gScore;\n          neighbor.f = neighbor.g + neighbor.h;\n          graph.markDirty(neighbor);\n          if (closest) {\n            // If the neighbour is closer than the current closestNode or if it's equally close but has\n            // a cheaper path than the current closest node then it becomes the closest node\n            if (neighbor.h < closestNode.h || (neighbor.h === closestNode.h && neighbor.g < closestNode.g)) {\n              closestNode = neighbor;\n            }\n          }\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbor);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbor);\n          }\n        }\n      }\n    }\n\n    if (closest) {\n      return pathTo(closestNode);\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  },\n  // See list of heuristics: http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html\n  heuristics: {\n    manhattan: function(pos0, pos1) {\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return d1 + d2;\n    },\n    diagonal: function(pos0, pos1) {\n      var D = 1;\n      var D2 = Math.sqrt(2);\n      var d1 = Math.abs(pos1.x - pos0.x);\n      var d2 = Math.abs(pos1.y - pos0.y);\n      return (D * (d1 + d2)) + ((D2 - (2 * D)) * Math.min(d1, d2));\n    }\n  },\n  cleanNode: function(node) {\n    node.f = 0;\n    node.g = 0;\n    node.h = 0;\n    node.visited = false;\n    node.closed = false;\n    node.parent = null;\n  }\n};\n\n/**\n * A graph memory structure\n * @param {Array} gridIn 2D array of input weights\n * @param {Object} [options]\n * @param {bool} [options.diagonal] Specifies whether diagonal moves are allowed\n */\nfunction Graph(gridIn, options) {\n  options = options || {};\n  this.nodes = [];\n  this.diagonal = !!options.diagonal;\n  this.grid = [];\n  for (var x = 0; x < gridIn.length; x++) {\n    this.grid[x] = [];\n\n    for (var y = 0, row = gridIn[x]; y < row.length; y++) {\n      var node = new GridNode(x, y, row[y]);\n      this.grid[x][y] = node;\n      this.nodes.push(node);\n    }\n  }\n  this.init();\n}\n\nGraph.prototype.init = function() {\n  this.dirtyNodes = [];\n  for (var i = 0; i < this.nodes.length; i++) {\n    astar.cleanNode(this.nodes[i]);\n  }\n};\n\nGraph.prototype.cleanDirty = function() {\n  for (var i = 0; i < this.dirtyNodes.length; i++) {\n    astar.cleanNode(this.dirtyNodes[i]);\n  }\n  this.dirtyNodes = [];\n};\n\nGraph.prototype.markDirty = function(node) {\n  this.dirtyNodes.push(node);\n};\n\nGraph.prototype.neighbors = function(node) {\n  var ret = [];\n  var x = node.x;\n  var y = node.y;\n  var grid = this.grid;\n\n  // West\n  if (grid[x - 1] && grid[x - 1][y]) {\n    ret.push(grid[x - 1][y]);\n  }\n\n  // East\n  if (grid[x + 1] && grid[x + 1][y]) {\n    ret.push(grid[x + 1][y]);\n  }\n\n  // South\n  if (grid[x] && grid[x][y - 1]) {\n    ret.push(grid[x][y - 1]);\n  }\n\n  // North\n  if (grid[x] && grid[x][y + 1]) {\n    ret.push(grid[x][y + 1]);\n  }\n\n  if (this.diagonal) {\n    // Southwest\n    if (grid[x - 1] && grid[x - 1][y - 1]) {\n      ret.push(grid[x - 1][y - 1]);\n    }\n\n    // Southeast\n    if (grid[x + 1] && grid[x + 1][y - 1]) {\n      ret.push(grid[x + 1][y - 1]);\n    }\n\n    // Northwest\n    if (grid[x - 1] && grid[x - 1][y + 1]) {\n      ret.push(grid[x - 1][y + 1]);\n    }\n\n    // Northeast\n    if (grid[x + 1] && grid[x + 1][y + 1]) {\n      ret.push(grid[x + 1][y + 1]);\n    }\n  }\n\n  return ret;\n};\n\nGraph.prototype.toString = function() {\n  var graphString = [];\n  var nodes = this.grid;\n  for (var x = 0; x < nodes.length; x++) {\n    var rowDebug = [];\n    var row = nodes[x];\n    for (var y = 0; y < row.length; y++) {\n      rowDebug.push(row[y].weight);\n    }\n    graphString.push(rowDebug.join(\" \"));\n  }\n  return graphString.join(\"\\n\");\n};\n\nfunction GridNode(x, y, weight) {\n  this.x = x;\n  this.y = y;\n  this.weight = weight;\n}\n\nGridNode.prototype.toString = function() {\n  return \"[\" + this.x + \" \" + this.y + \"]\";\n};\n\nGridNode.prototype.getCost = function(fromNeighbor) {\n  // Take diagonal weight into consideration.\n  if (fromNeighbor && fromNeighbor.x != this.x && fromNeighbor.y != this.y) {\n    return this.weight * 1.41421;\n  }\n  return this.weight;\n};\n\nGridNode.prototype.isWall = function() {\n  return this.weight === 0;\n};\n\nfunction BinaryHeap(scoreFunction) {\n  this.content = [];\n  this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n  push: function(element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  },\n  pop: function() {\n    // Store the first element so we can return it later.\n    var result = this.content[0];\n    // Get the element at the end of the array.\n    var end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  },\n  remove: function(node) {\n    var i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    var end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  },\n  size: function() {\n    return this.content.length;\n  },\n  rescoreElement: function(node) {\n    this.sinkDown(this.content.indexOf(node));\n  },\n  sinkDown: function(n) {\n    // Fetch the element that has to be sunk.\n    var element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n\n      // Compute the parent element's index, and fetch it.\n      var parentN = ((n + 1) >> 1) - 1;\n      var parent = this.content[parentN];\n      // Swap the elements if the parent is greater.\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      }\n      // Found a parent that is less, no need to sink any further.\n      else {\n        break;\n      }\n    }\n  },\n  bubbleUp: function(n) {\n    // Look up the target element and its score.\n    var length = this.content.length;\n    var element = this.content[n];\n    var elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      var child2N = (n + 1) << 1;\n      var child1N = child2N - 1;\n      // This is used to store the new position of the element, if any.\n      var swap = null;\n      var child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        var child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        var child2 = this.content[child2N];\n        var child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n};\n\nreturn {\n  astar: astar,\n  Graph: Graph\n};\n\n});","/**\r\n * Twice the area of the triangle formed by a, b and c\r\n * @private\r\n */\r\nexport function triarea2(a, b, c) {\r\n  const ax = b.x - a.x;\r\n  const ay = b.y - a.y;\r\n  const bx = c.x - a.x;\r\n  const by = c.y - a.y;\r\n  return bx * ay - ax * by;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function clamp(value, min, max) {\r\n  if (value < min) value = min;\r\n  if (value > max) value = max;\r\n  return value;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function almostEqual(value1, value2, errorMargin = 0.0001) {\r\n  if (Math.abs(value1 - value2) <= errorMargin) return true;\r\n  else return false;\r\n}\r\n\r\n/**\r\n * https://gist.github.com/Aaronduino/4068b058f8dbc34b4d3a9eedc8b2cbe0\r\n * @private\r\n */\r\nexport function angleDifference(x, y) {\r\n  let a = x - y;\r\n  const i = a + Math.PI;\r\n  const j = Math.PI * 2;\r\n  a = i - Math.floor(i / j) * j; // (a+180) % 360; this ensures the correct sign\r\n  a -= Math.PI;\r\n  return a;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function areCollinear(line1, line2, errorMargin = 0.0001) {\r\n  // Figure out if the two lines are equal by looking at the area of the triangle formed\r\n  // by their points\r\n  const area1 = triarea2(line1.start, line1.end, line2.start);\r\n  const area2 = triarea2(line1.start, line1.end, line2.end);\r\n  if (almostEqual(area1, 0, errorMargin) && almostEqual(area2, 0, errorMargin)) {\r\n    return true;\r\n  } else return false;\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nexport function distance(p1, p2) {\r\n  const dx = p2.x - p1.x;\r\n  const dy = p2.y - p1.y;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n","import { distance } from \"../utils\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Vector2 with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Vector2\r\n */\r\nexport default class Vector2 {\r\n  constructor(x, y) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n  }\r\n\r\n  equals(v) {\r\n    return this.x === v.x && this.y === v.y;\r\n  }\r\n\r\n  angle(v) {\r\n    return Math.atan2(v.y - this.y, v.x - this.x);\r\n  }\r\n\r\n  distance(v) {\r\n    const dx = v.x - this.x;\r\n    const dy = v.y - this.y;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  add(v) {\r\n    this.x += v.x;\r\n    this.y += v.y;\r\n  }\r\n\r\n  subtract(v) {\r\n    this.x -= v.x;\r\n    this.y -= v.y;\r\n  }\r\n\r\n  clone() {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}\r\n","import Vector2 from \"./math/vector-2\";\r\n\r\n/**\r\n * A class that represents a navigable polygon in a navmesh. It is build from a Phaser.Polygon. It\r\n * has a drawing function to help visualize it's features:\r\n *  - polygon\r\n *  - neighbors - any navpolys that can be reached from this navpoly\r\n *  - portals - overlapping edges between neighbors\r\n *  - centroid - not a true centroid, just an approximation.\r\n *  - boundingRadius - the radius of a circle at the centroid that fits all the points of the poly\r\n *\r\n * It implements the properties and fields that javascript-astar needs - weight, toString, isWall\r\n * and getCost. See GPS test from astar repo for structure:\r\n * https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavPoly\r\n * @private\r\n */\r\nclass NavPoly {\r\n  /**\r\n   * Creates an instance of NavPoly.\r\n   * @param {Phaser.Game} game\r\n   * @param {number} id\r\n   * @param {Phaser.Polygon} polygon\r\n   *\r\n   * @memberof NavPoly\r\n   */\r\n  constructor(id, polygon) {\r\n    this.id = id;\r\n    this.polygon = polygon;\r\n    this.edges = polygon.edges;\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n    this.centroid = this._calculateCentroid();\r\n    this.boundingRadius = this._calculateRadius();\r\n\r\n    this.weight = 1; // jsastar property\r\n  }\r\n\r\n  getPoints() {\r\n    return this.polygon.points;\r\n  }\r\n\r\n  contains(point) {\r\n    // Phaser's polygon check doesn't handle when a point is on one of the edges of the line. Note:\r\n    // check numerical stability here. It would also be good to optimize this for different shapes.\r\n    return this.polygon.contains(point.x, point.y) || this._isPointOnEdge(point);\r\n  }\r\n\r\n  destroy() {\r\n    this.neighbors = [];\r\n    this.portals = [];\r\n  }\r\n\r\n  // jsastar methods\r\n  toString() {\r\n    return `NavPoly(id: ${this.id} at: ${this.centroid})`;\r\n  }\r\n  isWall() {\r\n    return this.weight === 0;\r\n  }\r\n  centroidDistance(navPolygon) {\r\n    return this.centroid.distance(navPolygon.centroid);\r\n  }\r\n  getCost(navPolygon) {\r\n    return this.centroidDistance(navPolygon);\r\n  }\r\n\r\n  _calculateCentroid() {\r\n    // NOTE: this is not actually the centroid, it's the average of the vertices - not the same\r\n    // thing!\r\n    const centroid = new Vector2(0, 0);\r\n    const length = this.polygon.points.length;\r\n    this.polygon.points.forEach(p => centroid.add(p));\r\n    centroid.x /= length;\r\n    centroid.y /= length;\r\n    return centroid;\r\n  }\r\n\r\n  _calculateRadius() {\r\n    let boundingRadius = 0;\r\n    for (const point of this.polygon.points) {\r\n      const d = this.centroid.distance(point);\r\n      if (d > boundingRadius) boundingRadius = d;\r\n    }\r\n    return boundingRadius;\r\n  }\r\n\r\n  _isPointOnEdge({ x, y }) {\r\n    for (const edge of this.edges) {\r\n      if (edge.pointOnSegment(x, y)) return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\nexport default NavPoly;\r\n","import jsastar from \"javascript-astar\";\r\n\r\n/**\r\n * Graph for javascript-astar. It implements the functionality for astar. See GPS test from astar\r\n * repo for structure: https://github.com/bgrins/javascript-astar/blob/master/test/tests.js\r\n *\r\n * @class NavGraph\r\n * @private\r\n */\r\nclass NavGraph {\r\n  constructor(navPolygons) {\r\n    this.nodes = navPolygons;\r\n    this.init();\r\n  }\r\n\r\n  neighbors(navPolygon) {\r\n    return navPolygon.neighbors;\r\n  }\r\n\r\n  navHeuristic(navPolygon1, navPolygon2) {\r\n    return navPolygon1.centroidDistance(navPolygon2);\r\n  }\r\n\r\n  destroy() {\r\n    this.cleanDirty();\r\n    this.nodes = [];\r\n  }\r\n}\r\n\r\nNavGraph.prototype.init = jsastar.Graph.prototype.init;\r\nNavGraph.prototype.cleanDirty = jsastar.Graph.prototype.cleanDirty;\r\nNavGraph.prototype.markDirty = jsastar.Graph.prototype.markDirty;\r\n\r\nexport default NavGraph;\r\n","// Mostly sourced from PatrolJS at the moment. TODO: come back and reimplement this as an incomplete\r\n// funnel algorithm so astar checks can be more accurate.\r\n\r\nimport { triarea2 } from \"./utils\";\r\n\r\n/**\r\n * @private\r\n */\r\nclass Channel {\r\n  constructor() {\r\n    this.portals = [];\r\n  }\r\n\r\n  /**\r\n   * @param {Phaser.Point} p1\r\n   * @param {Phaser.Point} p2\r\n   *\r\n   * @memberof Channel\r\n   */\r\n  push(p1, p2 = null) {\r\n    if (p2 === null) p2 = p1;\r\n    this.portals.push({\r\n      left: p1,\r\n      right: p2\r\n    });\r\n  }\r\n\r\n  stringPull() {\r\n    var portals = this.portals;\r\n    var pts = [];\r\n    // Init scan state\r\n    var portalApex, portalLeft, portalRight;\r\n    var apexIndex = 0,\r\n      leftIndex = 0,\r\n      rightIndex = 0;\r\n\r\n    portalApex = portals[0].left;\r\n    portalLeft = portals[0].left;\r\n    portalRight = portals[0].right;\r\n\r\n    // Add start point.\r\n    pts.push(portalApex);\r\n\r\n    for (var i = 1; i < portals.length; i++) {\r\n      // Find the next portal vertices\r\n      var left = portals[i].left;\r\n      var right = portals[i].right;\r\n\r\n      // Update right vertex.\r\n      if (triarea2(portalApex, portalRight, right) <= 0.0) {\r\n        if (portalApex.equals(portalRight) || triarea2(portalApex, portalLeft, right) > 0.0) {\r\n          // Tighten the funnel.\r\n          portalRight = right;\r\n          rightIndex = i;\r\n        } else {\r\n          // Right vertex just crossed over the left vertex, so the left vertex should\r\n          // now be part of the path.\r\n          pts.push(portalLeft);\r\n\r\n          // Restart scan from portal left point.\r\n\r\n          // Make current left the new apex.\r\n          portalApex = portalLeft;\r\n          apexIndex = leftIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n\r\n      // Update left vertex.\r\n      if (triarea2(portalApex, portalLeft, left) >= 0.0) {\r\n        if (portalApex.equals(portalLeft) || triarea2(portalApex, portalRight, left) < 0.0) {\r\n          // Tighten the funnel.\r\n          portalLeft = left;\r\n          leftIndex = i;\r\n        } else {\r\n          // Left vertex just crossed over the right vertex, so the right vertex should\r\n          // now be part of the path\r\n          pts.push(portalRight);\r\n\r\n          // Restart scan from portal right point.\r\n\r\n          // Make current right the new apex.\r\n          portalApex = portalRight;\r\n          apexIndex = rightIndex;\r\n          // Reset portal\r\n          portalLeft = portalApex;\r\n          portalRight = portalApex;\r\n          leftIndex = apexIndex;\r\n          rightIndex = apexIndex;\r\n          // Restart scan\r\n          i = apexIndex;\r\n          continue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pts.length === 0 || !pts[pts.length - 1].equals(portals[portals.length - 1].left)) {\r\n      // Append last point to path.\r\n      pts.push(portals[portals.length - 1].left);\r\n    }\r\n\r\n    this.path = pts;\r\n    return pts;\r\n  }\r\n}\r\n\r\nexport default Channel;\r\n","import Vector2 from \"./vector-2\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Line with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Line\r\n */\r\nexport default class Line {\r\n  constructor(x1, y1, x2, y2) {\r\n    this.start = new Vector2(x1, y1);\r\n    this.end = new Vector2(x2, y2);\r\n\r\n    this.left = Math.min(x1, x2);\r\n    this.right = Math.max(x1, x2);\r\n    this.top = Math.min(y1, y2);\r\n    this.bottom = Math.max(y1, y2);\r\n  }\r\n\r\n  pointOnSegment(x, y) {\r\n    return (\r\n      x >= this.left &&\r\n      x <= this.right &&\r\n      y >= this.top &&\r\n      y <= this.bottom &&\r\n      this.pointOnLine(x, y)\r\n    );\r\n  }\r\n\r\n  pointOnLine(x, y) {\r\n    // Compare slope of line start -> xy to line start -> line end\r\n    return (x - this.left) * (this.bottom - this.top) === (this.right - this.left) * (y - this.top);\r\n  }\r\n}\r\n","import Line from \"./line\";\r\n\r\n/**\r\n * Stripped down version of Phaser's Polygon with just the functionality needed for navmeshes\r\n *\r\n * @export\r\n * @class Polygon\r\n */\r\nexport default class Polygon {\r\n  constructor(points, closed = true) {\r\n    this.points = points;\r\n    this.edges = [];\r\n\r\n    for (let i = 1; i < points.length; i++) {\r\n      const p1 = points[i - 1];\r\n      const p2 = points[i];\r\n      this.edges.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n    }\r\n    if (closed) {\r\n      const first = points[0];\r\n      const last = points[points.length - 1];\r\n      this.edges.push(new Line(first.x, first.y, last.x, last.y));\r\n    }\r\n  }\r\n\r\n  contains(x, y) {\r\n    let inside = false;\r\n\r\n    for (let i = -1, j = this.points.length - 1; ++i < this.points.length; j = i) {\r\n      const ix = this.points[i].x;\r\n      const iy = this.points[i].y;\r\n\r\n      const jx = this.points[j].x;\r\n      const jy = this.points[j].y;\r\n\r\n      if (\r\n        ((iy <= y && y < jy) || (jy <= y && y < iy)) &&\r\n        x < ((jx - ix) * (y - iy)) / (jy - iy) + ix\r\n      ) {\r\n        inside = !inside;\r\n      }\r\n    }\r\n\r\n    return inside;\r\n  }\r\n}\r\n","import NavMesh from \"./navmesh\";\r\n\r\nexport default NavMesh;\r\n","import jsastar from \"javascript-astar\";\r\nimport NavPoly from \"./navpoly\";\r\nimport NavGraph from \"./navgraph\";\r\nimport Channel from \"./channel\";\r\nimport { angleDifference, areCollinear, clamp } from \"./utils\";\r\nimport Vector2 from \"./math/vector-2\";\r\nimport Line from \"./math/line\";\r\nimport Polygon from \"./math/polygon\";\r\n\r\n/**\r\n * The workhorse that represents a navigation mesh built from a series of polygons. Once built, the\r\n * mesh can be asked for a path from one point to another point. It has debug methods for\r\n * visualizing paths and visualizing the individual polygons. Some internal terminology usage:\r\n *\r\n * - neighbor: a polygon that shares part of an edge with another polygon\r\n * - portal: when two neighbor's have edges that overlap, the portal is the overlapping line segment\r\n * - channel: the path of polygons from starting point to end point\r\n * - pull the string: run the funnel algorithm on the channel so that the path hugs the edges of the\r\n *   channel. Equivalent to having a string snaking through a hallway and then pulling it taut.\r\n */\r\nexport default class NavMesh {\r\n  /**\r\n   * Creates an instance of NavMesh.\r\n   *\r\n   * @param {Phaser.Polygon[]} polygons\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been\r\n   * shrunk around obstacles (a.k.a the amount obstacles have been expanded)\r\n   */\r\n  constructor(meshPolygonPoints, meshShrinkAmount = 0) {\r\n    this._meshShrinkAmount = meshShrinkAmount;\r\n\r\n    // TODO: this is temporary\r\n    const newPolys = meshPolygonPoints.map(polyPoints => {\r\n      const vectors = polyPoints.map(p => new Vector2(p.x, p.y));\r\n      return new Polygon(vectors);\r\n    });\r\n\r\n    // Construct NavPoly instances for each polygon\r\n    this._navPolygons = newPolys.map((polygon, i) => new NavPoly(i, polygon));\r\n\r\n    this._calculateNeighbors();\r\n\r\n    // Astar graph of connections between polygons\r\n    this._graph = new NavGraph(this._navPolygons);\r\n  }\r\n\r\n  getPolygons() {\r\n    return this._navPolygons;\r\n  }\r\n\r\n  /**\r\n   * Cleanup method to remove references so that navmeshes don't hang around from state to state.\r\n   * You don't have to invoke this directly. If you call destroy on the plugin, it will destroy\r\n   * all navmeshes that have been created.\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  destroy() {\r\n    this._graph.destroy();\r\n    for (const poly of this._navPolygons) poly.destroy();\r\n    this._navPolygons = [];\r\n    // this.game = null;\r\n    this.disableDebug();\r\n  }\r\n\r\n  /**\r\n   * Find a path from the start point to the end point using this nav mesh.\r\n   *\r\n   * @param {Phaser.Point} startVector\r\n   * @param {Phaser.Point} endVector\r\n   * @returns {Phaser.Point[]|null} An array of points if a path is found, or null if no path\r\n   *\r\n   * @memberof NavMesh\r\n   */\r\n  findPath(startPoint, endPoint) {\r\n    let startPoly = null;\r\n    let endPoly = null;\r\n    let startDistance = Number.MAX_VALUE;\r\n    let endDistance = Number.MAX_VALUE;\r\n    let d, r;\r\n    const startVector = new Vector2(startPoint.x, startPoint.y);\r\n    const endVector = new Vector2(endPoint.x, endPoint.y);\r\n\r\n    // Find the closest poly for the starting and ending point\r\n    for (const navPoly of this._navPolygons) {\r\n      r = navPoly.boundingRadius;\r\n      // Start\r\n      d = navPoly.centroid.distance(startVector);\r\n      if (d <= startDistance && d <= r && navPoly.contains(startVector)) {\r\n        startPoly = navPoly;\r\n        startDistance = d;\r\n      }\r\n      // End\r\n      d = navPoly.centroid.distance(endVector);\r\n      if (d <= endDistance && d <= r && navPoly.contains(endVector)) {\r\n        endPoly = navPoly;\r\n        endDistance = d;\r\n      }\r\n    }\r\n\r\n    // If the start point wasn't inside a polygon, run a more liberal check that allows a point\r\n    // to be within meshShrinkAmount radius of a polygon\r\n    if (!startPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        // Check if point is within bounding circle to avoid extra projection calculations\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(startVector);\r\n        if (d <= r) {\r\n          // Check if projected point is within range of a polgyon and is closer than the\r\n          // previous point\r\n          const { distance } = this._projectPointToPolygon(startVector, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < startDistance) {\r\n            startPoly = navPoly;\r\n            startDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Same check as above, but for the end point\r\n    if (!endPoly && this._meshShrinkAmount > 0) {\r\n      for (const navPoly of this._navPolygons) {\r\n        r = navPoly.boundingRadius + this._meshShrinkAmount;\r\n        d = navPoly.centroid.distance(endVector);\r\n        if (d <= r) {\r\n          const { distance } = this._projectPointToPolygon(endVector, navPoly);\r\n          if (distance <= this._meshShrinkAmount && distance < endDistance) {\r\n            endPoly = navPoly;\r\n            endDistance = distance;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // No matching polygons locations for the start or end, so no path found\r\n    if (!startPoly || !endPoly) return null;\r\n\r\n    // If the start and end polygons are the same, return a direct path\r\n    if (startPoly === endPoly) return [startVector, endVector];\r\n\r\n    // Search!\r\n    const astarPath = jsastar.astar.search(this._graph, startPoly, endPoly, {\r\n      heuristic: this._graph.navHeuristic\r\n    });\r\n\r\n    // While the start and end polygons may be valid, no path between them\r\n    if (astarPath.length === 0) return null;\r\n\r\n    // jsastar drops the first point from the path, but the funnel algorithm needs it\r\n    astarPath.unshift(startPoly);\r\n\r\n    // We have a path, so now time for the funnel algorithm\r\n    const channel = new Channel();\r\n    channel.push(startVector);\r\n    for (let i = 0; i < astarPath.length - 1; i++) {\r\n      const navPolygon = astarPath[i];\r\n      const nextNavPolygon = astarPath[i + 1];\r\n\r\n      // Find the portal\r\n      let portal = null;\r\n      for (let i = 0; i < navPolygon.neighbors.length; i++) {\r\n        if (navPolygon.neighbors[i].id === nextNavPolygon.id) {\r\n          portal = navPolygon.portals[i];\r\n        }\r\n      }\r\n\r\n      // Push the portal vertices into the channel\r\n      channel.push(portal.start, portal.end);\r\n    }\r\n    channel.push(endVector);\r\n\r\n    // Pull a string along the channel to run the funnel\r\n    channel.stringPull();\r\n\r\n    // Clone path, excluding duplicates\r\n    let lastPoint = null;\r\n    const phaserPath = [];\r\n    for (const p of channel.path) {\r\n      const newPoint = p.clone();\r\n      if (!lastPoint || !newPoint.equals(lastPoint)) phaserPath.push(newPoint);\r\n      lastPoint = newPoint;\r\n    }\r\n\r\n    return phaserPath;\r\n  }\r\n\r\n  _calculateNeighbors() {\r\n    // Fill out the neighbor information for each navpoly\r\n    for (let i = 0; i < this._navPolygons.length; i++) {\r\n      const navPoly = this._navPolygons[i];\r\n\r\n      for (let j = i + 1; j < this._navPolygons.length; j++) {\r\n        const otherNavPoly = this._navPolygons[j];\r\n\r\n        // Check if the other navpoly is within range to touch\r\n        const d = navPoly.centroid.distance(otherNavPoly.centroid);\r\n        if (d > navPoly.boundingRadius + otherNavPoly.boundingRadius) continue;\r\n\r\n        // The are in range, so check each edge pairing\r\n        for (const edge of navPoly.edges) {\r\n          for (const otherEdge of otherNavPoly.edges) {\r\n            // If edges aren't collinear, not an option for connecting navpolys\r\n            if (!areCollinear(edge, otherEdge)) continue;\r\n\r\n            // If they are collinear, check if they overlap\r\n            const overlap = this._getSegmentOverlap(edge, otherEdge);\r\n            if (!overlap) continue;\r\n\r\n            // Connections are symmetric!\r\n            navPoly.neighbors.push(otherNavPoly);\r\n            otherNavPoly.neighbors.push(navPoly);\r\n\r\n            // Calculate the portal between the two polygons - this needs to be in\r\n            // counter-clockwise order, relative to each polygon\r\n            const [p1, p2] = overlap;\r\n            let edgeStartAngle = navPoly.centroid.angle(edge.start);\r\n            let a1 = navPoly.centroid.angle(overlap[0]);\r\n            let a2 = navPoly.centroid.angle(overlap[1]);\r\n            let d1 = angleDifference(edgeStartAngle, a1);\r\n            let d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              navPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              navPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            edgeStartAngle = otherNavPoly.centroid.angle(otherEdge.start);\r\n            a1 = otherNavPoly.centroid.angle(overlap[0]);\r\n            a2 = otherNavPoly.centroid.angle(overlap[1]);\r\n            d1 = angleDifference(edgeStartAngle, a1);\r\n            d2 = angleDifference(edgeStartAngle, a2);\r\n            if (d1 < d2) {\r\n              otherNavPoly.portals.push(new Line(p1.x, p1.y, p2.x, p2.y));\r\n            } else {\r\n              otherNavPoly.portals.push(new Line(p2.x, p2.y, p1.x, p1.y));\r\n            }\r\n\r\n            // Two convex polygons shouldn't be connected more than once! (Unless\r\n            // there are unnecessary vertices...)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Check two collinear line segments to see if they overlap by sorting the points.\r\n  // Algorithm source: http://stackoverflow.com/a/17152247\r\n  _getSegmentOverlap(line1, line2) {\r\n    const points = [\r\n      { line: line1, point: line1.start },\r\n      { line: line1, point: line1.end },\r\n      { line: line2, point: line2.start },\r\n      { line: line2, point: line2.end }\r\n    ];\r\n    points.sort(function(a, b) {\r\n      if (a.point.x < b.point.x) return -1;\r\n      else if (a.point.x > b.point.x) return 1;\r\n      else {\r\n        if (a.point.y < b.point.y) return -1;\r\n        else if (a.point.y > b.point.y) return 1;\r\n        else return 0;\r\n      }\r\n    });\r\n    // If the first two points in the array come from the same line, no overlap\r\n    const noOverlap = points[0].line === points[1].line;\r\n    // If the two middle points in the array are the same coordinates, then there is a\r\n    // single point of overlap.\r\n    const singlePointOverlap = points[1].point.equals(points[2].point);\r\n    if (noOverlap || singlePointOverlap) return null;\r\n    else return [points[1].point, points[2].point];\r\n  }\r\n\r\n  /**\r\n   * Project a point onto a polygon in the shortest distance possible.\r\n   *\r\n   * @param {Phaser.Point} point The point to project\r\n   * @param {NavPoly} navPoly The navigation polygon to test against\r\n   * @returns {{point: Phaser.Point, distance: number}}\r\n   *\r\n   * @private\r\n   * @memberof NavMesh\r\n   */\r\n  _projectPointToPolygon(point, navPoly) {\r\n    let closestProjection = null;\r\n    let closestDistance = Number.MAX_VALUE;\r\n    for (const edge of navPoly.edges) {\r\n      const projectedPoint = this._projectPointToEdge(point, edge);\r\n      const d = point.distance(projectedPoint);\r\n      if (closestProjection === null || d < closestDistance) {\r\n        closestDistance = d;\r\n        closestProjection = projectedPoint;\r\n      }\r\n    }\r\n    return { point: closestProjection, distance: closestDistance };\r\n  }\r\n\r\n  _distanceSquared(a, b) {\r\n    const dx = b.x - a.x;\r\n    const dy = b.y - a.y;\r\n    return dx * dx + dy * dy;\r\n  }\r\n\r\n  // Project a point onto a line segment\r\n  // JS Source: http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\r\n  _projectPointToEdge(point, line) {\r\n    const a = line.start;\r\n    const b = line.end;\r\n    // Consider the parametric equation for the edge's line, p = a + t (b - a). We want to find\r\n    // where our point lies on the line by solving for t:\r\n    //  t = [(p-a) . (b-a)] / |b-a|^2\r\n    const l2 = this._distanceSquared(a, b);\r\n    let t = ((point.x - a.x) * (b.x - a.x) + (point.y - a.y) * (b.y - a.y)) / l2;\r\n    // We clamp t from [0,1] to handle points outside the segment vw.\r\n    t = clamp(t, 0, 1);\r\n    // Project onto the segment\r\n    const p = new Vector2(a.x + t * (b.x - a.x), a.y + t * (b.y - a.y));\r\n    return p;\r\n  }\r\n}\r\n","import NavMesh from \"navmesh/src\"; // import the source - not the dist - no need to double build\r\n\r\n/**\r\n *\r\n */\r\nexport default class PhaserNavMesh {\r\n  constructor(plugin, key, meshPoints, meshShrinkAmount = 0) {\r\n    this.key = key;\r\n    this.plugin = plugin;\r\n    this.game = plugin.game;\r\n    this.debugGraphics = null;\r\n    this.navMesh = new NavMesh(meshPoints, meshShrinkAmount);\r\n  }\r\n\r\n  findPath(startPoint, endPoint, PointClass = Phaser.Point) {\r\n    const path = this.navMesh.findPath(startPoint, endPoint);\r\n    return path ? path.map(({ x, y }) => new PointClass(x, y)) : path;\r\n  }\r\n\r\n  enableDebug(graphics) {\r\n    if (!graphics && !this.debugGraphics) {\r\n      this.debugGraphics = this.game.add.graphics();\r\n    } else if (graphics) {\r\n      if (this.debugGraphics) this.debugGraphics.destroy();\r\n      this.debugGraphics = graphics;\r\n    }\r\n\r\n    this.debugGraphics.visible = true;\r\n\r\n    return this.debugGraphics;\r\n  }\r\n\r\n  disableDebug() {\r\n    if (this.debugGraphics) this.debugGraphics.visible = false;\r\n  }\r\n\r\n  isDebugEnabled() {\r\n    return this.debugGraphics && this.debugGraphics.visible;\r\n  }\r\n\r\n  debugDrawClear() {\r\n    if (this.debugGraphics) this.debugGraphics.clear();\r\n  }\r\n\r\n  /**\r\n   * Visualize the polygons in the nav mesh as an overlay on top of the game\r\n   *\r\n   * @param {object} options\r\n   * @param {boolean} [options.drawCentroid=true] For each polygon, show the approx centroid\r\n   * @param {boolean} [options.drawBounds=false] For each polygon, show the bounding radius\r\n   * @param {boolean} [options.drawNeighbors=true] For each polygon, show the connections to\r\n   * neighbors\r\n   * @param {boolean} [options.drawPortals=true] For each polygon, show the portal edges\r\n   */\r\n  debugDrawMesh({\r\n    drawCentroid = true,\r\n    drawBounds = false,\r\n    drawNeighbors = true,\r\n    drawPortals = true,\r\n    palette = [0x00a0b0, 0x6a4a3c, 0xcc333f, 0xeb6841, 0xedc951]\r\n  } = {}) {\r\n    if (!this.debugGraphics) return;\r\n\r\n    const navPolys = this.navMesh.getPolygons();\r\n\r\n    navPolys.forEach(poly => {\r\n      const color = palette[poly.id % palette.length];\r\n      this.debugGraphics.lineWidth = 0;\r\n      this.debugGraphics.beginFill(color);\r\n      this.debugGraphics.drawPolygon(new Phaser.Polygon(...poly.getPoints()));\r\n      this.debugGraphics.endFill();\r\n\r\n      if (drawCentroid) {\r\n        this.debugGraphics.beginFill(0x000000);\r\n        this.debugGraphics.drawEllipse(poly.centroid.x, poly.centroid.y, 4, 4);\r\n        this.debugGraphics.endFill();\r\n      }\r\n\r\n      if (drawBounds) {\r\n        this.debugGraphics.lineStyle(1, 0xffffff);\r\n        const r = poly.boundingRadius;\r\n        this.debugGraphics.drawEllipse(poly.centroid.x, poly.centroid.y, r, r);\r\n      }\r\n\r\n      if (drawNeighbors) {\r\n        this.debugGraphics.lineStyle(2, 0x000000);\r\n        poly.neighbors.forEach(n => {\r\n          this.debugGraphics.moveTo(poly.centroid.x, poly.centroid.y);\r\n          this.debugGraphics.lineTo(n.centroid.x, n.centroid.y);\r\n        });\r\n      }\r\n\r\n      if (drawPortals) {\r\n        this.debugGraphics.lineStyle(10, 0x000000);\r\n        poly.portals.forEach(portal => {\r\n          this.debugGraphics.moveTo(portal.start.x, portal.start.y);\r\n          this.debugGraphics.lineTo(portal.end.x, portal.end.y);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Visualize a path (array of points) on the debug graphics overlay\r\n   *\r\n   * @param {Phaser.Point[]} path\r\n   * @param {number} [color=0x00FF00]\r\n   * @param {number} [thickness=10]\r\n   */\r\n  debugDrawPath(path, color = 0x00ff00, thickness = 10, alpha = 1) {\r\n    if (!this.debugGraphics) return;\r\n\r\n    if (path && path.length) {\r\n      // Draw line for path\r\n      this.debugGraphics.lineStyle(thickness, color, alpha);\r\n      this.debugGraphics.drawShape(new Phaser.Polygon(...path));\r\n\r\n      // Draw circle at start and end of path\r\n      this.debugGraphics.beginFill(color, alpha);\r\n      const d = 0.5 * thickness;\r\n      this.debugGraphics.drawEllipse(path[0].x, path[0].y, d, d);\r\n      if (path.length > 1) {\r\n        const lastPoint = path[path.length - 1];\r\n        this.debugGraphics.drawEllipse(lastPoint.x, lastPoint.y, d, d);\r\n      }\r\n      this.debugGraphics.endFill();\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.navMesh) this.navMesh.destroy();\r\n    if (this.debugGraphics) this.debugGraphics.destroy();\r\n    this.plugin.removeMesh(this.key);\r\n    this.navMesh = undefined;\r\n    this.debugGraphics = undefined;\r\n    this.plugin = undefined;\r\n    this.scene = undefined;\r\n  }\r\n}\r\n","import PhaserNavMesh from \"./phaser-navmesh\";\r\n\r\n/**\r\n * This class can create navigation meshes for use in Phaser. The navmeshes can be constructed from\r\n * convex polygons embedded in a Tiled map. The class that conforms to Phaser's plugin structure.\r\n *\r\n * @export\r\n * @class NavMeshPlugin\r\n */\r\nexport default class PhaserNavMeshPlugin extends Phaser.Plugin {\r\n  constructor(game, pluginManager) {\r\n    super(game, pluginManager);\r\n\r\n    this.phaserNavMeshes = {};\r\n  }\r\n\r\n  destroy() {\r\n    this.systems.events.Object.values(this.phaserNavMeshes).forEach(m => m.destroy());\r\n    this.phaserNavMeshes = [];\r\n    this.game = undefined;\r\n  }\r\n\r\n  removeMesh(key) {\r\n    if (this.phaserNavMeshes[key]) {\r\n      this.phaserNavMeshes[key].destroy();\r\n      this.phaserNavMeshes[key] = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a navmesh from Tiled. Currently assumes that the polygons are squares! Does not support\r\n   * tilemap layer scaling, rotation or position.\r\n   *\r\n   * @param {string} key Key to store this navmesh under within the plugin\r\n   * @param {Phaser.Tilemaps.Tilemap} tilemap The tilemap that contains polygons under an object\r\n   * layer\r\n   * @param {string} layerName The name of the object layer in the tilemap\r\n   * @param {number} [meshShrinkAmount=0] The amount (in pixels) that the navmesh has been shrunk\r\n   * around obstacles (a.k.a the amount obstacles have been expanded)\r\n   *\r\n   * @memberof PhaserNavMeshPlugin\r\n   */\r\n  buildMeshFromTiled(key, objectLayer, meshShrinkAmount = 0) {\r\n    if (this.phaserNavMeshes[key]) {\r\n      console.warn(`NavMeshPlugin: a navmesh already exists with the given key: ${key}`);\r\n      return this.phaserNavMeshes[key];\r\n    }\r\n\r\n    if (!objectLayer || objectLayer.length === 0) {\r\n      console.warn(\r\n        `NavMeshPlugin: The given tilemap object layer is empty or undefined: ${objectLayer}`\r\n      );\r\n    }\r\n\r\n    // Load up the object layer\r\n    const objects = objectLayer || [];\r\n\r\n    // Loop over the objects and construct a polygon - assumes a rectangle for now!\r\n    // TODO: support layer position, scale, rotation\r\n    const polygons = objects.map(obj => {\r\n      const top = obj.y;\r\n      const bottom = obj.y + obj.height;\r\n      const left = obj.x;\r\n      const right = obj.x + obj.width;\r\n      return [\r\n        { x: left, y: top },\r\n        { x: left, y: bottom },\r\n        { x: right, y: bottom },\r\n        { x: right, y: top }\r\n      ];\r\n    });\r\n\r\n    const mesh = new PhaserNavMesh(this, key, polygons, meshShrinkAmount);\r\n\r\n    this.phaserNavMeshes[key] = mesh;\r\n\r\n    return mesh;\r\n  }\r\n}\r\n","import PhaserNavMeshPlugin from \"./phaser-navmesh-plugin\";\r\nimport PhaserNavMesh from \"./phaser-navmesh\";\r\n\r\nexport default PhaserNavMeshPlugin;\r\nexport { PhaserNavMesh };\r\n"],"sourceRoot":""}